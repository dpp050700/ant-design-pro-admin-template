/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a time interval, encoded as a Timestamp start (inclusive) and a
 * Timestamp end (exclusive).
 *
 * The start must be less than or equal to the end.
 * When the start equals the end, the interval is empty (matches no time).
 * When both start and end are unspecified, the interval matches any time.
 * @export
 * @interface Interval
 */
export interface Interval {
  /**
   * Optional. Inclusive start of the interval.
   *
   * If specified, a Timestamp matching this interval will have to be the same
   * or after the start.
   * @type {Date}
   * @memberof Interval
   */
  startTime?: Date;
  /**
   * Optional. Exclusive end of the interval.
   *
   * If specified, a Timestamp matching this interval will have to be before the
   * end.
   * @type {Date}
   * @memberof Interval
   */
  endTime?: Date;
}

/**
 * Check if a given object implements the Interval interface.
 */
export function instanceOfInterval(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function IntervalFromJSON(json: any): Interval {
  return IntervalFromJSONTyped(json, false);
}

export function IntervalFromJSONTyped(json: any, ignoreDiscriminator: boolean): Interval {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    startTime: !exists(json, 'startTime') ? undefined : new Date(json['startTime']),
    endTime: !exists(json, 'endTime') ? undefined : new Date(json['endTime']),
  };
}

export function IntervalToJSON(value?: Interval | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    startTime: value.startTime === undefined ? undefined : value.startTime.toISOString(),
    endTime: value.endTime === undefined ? undefined : value.endTime.toISOString(),
  };
}
