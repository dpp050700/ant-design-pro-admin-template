/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface Address
 */
export interface Address {
  /**
   *
   * @type {string}
   * @memberof Address
   */
  readonly id: string;
  /**
   *
   * @type {Date}
   * @memberof Address
   */
  readonly createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof Address
   */
  readonly updatedAt: Date;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  xing?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  ming?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  xing1?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  ming1?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  hao?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  sheng?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  shi?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  banchi?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  jian?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  dian?: string;
}

/**
 * Check if a given object implements the Address interface.
 */
export function instanceOfAddress(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'updatedAt' in value;

  return isInstance;
}

export function AddressFromJSON(json: any): Address {
  return AddressFromJSONTyped(json, false);
}

export function AddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): Address {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    createdAt: new Date(json['createdAt']),
    updatedAt: new Date(json['updatedAt']),
    xing: !exists(json, 'xing') ? undefined : json['xing'],
    ming: !exists(json, 'ming') ? undefined : json['ming'],
    xing1: !exists(json, 'xing1') ? undefined : json['xing1'],
    ming1: !exists(json, 'ming1') ? undefined : json['ming1'],
    hao: !exists(json, 'hao') ? undefined : json['hao'],
    sheng: !exists(json, 'sheng') ? undefined : json['sheng'],
    shi: !exists(json, 'shi') ? undefined : json['shi'],
    banchi: !exists(json, 'banchi') ? undefined : json['banchi'],
    jian: !exists(json, 'jian') ? undefined : json['jian'],
    dian: !exists(json, 'dian') ? undefined : json['dian'],
  };
}

export function AddressToJSON(value?: Address | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    xing: value.xing,
    ming: value.ming,
    xing1: value.xing1,
    ming1: value.ming1,
    hao: value.hao,
    sheng: value.sheng,
    shi: value.shi,
    banchi: value.banchi,
    jian: value.jian,
    dian: value.dian,
  };
}
