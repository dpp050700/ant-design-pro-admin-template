/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Any } from './Any';
import { AnyFromJSON, AnyFromJSONTyped, AnyToJSON } from './Any';
import type { ErrorsCode } from './ErrorsCode';
import { ErrorsCodeFromJSON, ErrorsCodeFromJSONTyped, ErrorsCodeToJSON } from './ErrorsCode';

/**
 *
 * @export
 * @interface ErrorsErrCode
 */
export interface ErrorsErrCode {
  /**
   *
   * @type {ErrorsCode}
   * @memberof ErrorsErrCode
   */
  statusCode?: ErrorsCode;
  /**
   *
   * @type {number}
   * @memberof ErrorsErrCode
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof ErrorsErrCode
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ErrorsErrCode
   */
  message?: string;
  /**
   *
   * @type {Array<Any>}
   * @memberof ErrorsErrCode
   */
  details?: Array<Any>;
}

/**
 * Check if a given object implements the ErrorsErrCode interface.
 */
export function instanceOfErrorsErrCode(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function ErrorsErrCodeFromJSON(json: any): ErrorsErrCode {
  return ErrorsErrCodeFromJSONTyped(json, false);
}

export function ErrorsErrCodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorsErrCode {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    statusCode: !exists(json, 'statusCode') ? undefined : ErrorsCodeFromJSON(json['statusCode']),
    code: !exists(json, 'code') ? undefined : json['code'],
    name: !exists(json, 'name') ? undefined : json['name'],
    message: !exists(json, 'message') ? undefined : json['message'],
    details: !exists(json, 'details')
      ? undefined
      : (json['details'] as Array<any>).map(AnyFromJSON),
  };
}

export function ErrorsErrCodeToJSON(value?: ErrorsErrCode | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    statusCode: ErrorsCodeToJSON(value.statusCode),
    code: value.code,
    name: value.name,
    message: value.message,
    details: value.details === undefined ? undefined : (value.details as Array<any>).map(AnyToJSON),
  };
}
