/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrderStatus } from './OrderStatus';
import { OrderStatusFromJSON, OrderStatusFromJSONTyped, OrderStatusToJSON } from './OrderStatus';
import type { Room } from './Room';
import { RoomFromJSON, RoomFromJSONTyped, RoomToJSON } from './Room';
import type { SpecialOrderDetail } from './SpecialOrderDetail';
import {
  SpecialOrderDetailFromJSON,
  SpecialOrderDetailFromJSONTyped,
  SpecialOrderDetailToJSON,
} from './SpecialOrderDetail';
import type { SpecialService } from './SpecialService';
import {
  SpecialServiceFromJSON,
  SpecialServiceFromJSONTyped,
  SpecialServiceToJSON,
} from './SpecialService';

/**
 *
 * @export
 * @interface SpecialOrder
 */
export interface SpecialOrder {
  /**
   *
   * @type {string}
   * @memberof SpecialOrder
   */
  readonly id: string;
  /**
   *
   * @type {Date}
   * @memberof SpecialOrder
   */
  readonly createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof SpecialOrder
   */
  readonly updatedAt: Date;
  /**
   *
   * @type {OrderStatus}
   * @memberof SpecialOrder
   */
  status: OrderStatus;
  /**
   *
   * @type {string}
   * @memberof SpecialOrder
   */
  specialServiceId: string;
  /**
   *
   * @type {string}
   * @memberof SpecialOrder
   */
  roomOrderId: string;
  /**
   *
   * @type {string}
   * @memberof SpecialOrder
   */
  userId: string;
  /**
   *
   * @type {SpecialOrderDetail}
   * @memberof SpecialOrder
   */
  detail?: SpecialOrderDetail;
  /**
   *
   * @type {SpecialService}
   * @memberof SpecialOrder
   */
  specialService?: SpecialService;
  /**
   *
   * @type {Room}
   * @memberof SpecialOrder
   */
  room?: Room;
  /**
   *
   * @type {string}
   * @memberof SpecialOrder
   */
  readonly payId?: string;
}

/**
 * Check if a given object implements the SpecialOrder interface.
 */
export function instanceOfSpecialOrder(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'updatedAt' in value;
  isInstance = isInstance && 'status' in value;
  isInstance = isInstance && 'specialServiceId' in value;
  isInstance = isInstance && 'roomOrderId' in value;
  isInstance = isInstance && 'userId' in value;

  return isInstance;
}

export function SpecialOrderFromJSON(json: any): SpecialOrder {
  return SpecialOrderFromJSONTyped(json, false);
}

export function SpecialOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): SpecialOrder {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    createdAt: new Date(json['createdAt']),
    updatedAt: new Date(json['updatedAt']),
    status: OrderStatusFromJSON(json['status']),
    specialServiceId: json['specialServiceId'],
    roomOrderId: json['roomOrderId'],
    userId: json['userId'],
    detail: !exists(json, 'detail') ? undefined : SpecialOrderDetailFromJSON(json['detail']),
    specialService: !exists(json, 'specialService')
      ? undefined
      : SpecialServiceFromJSON(json['specialService']),
    room: !exists(json, 'room') ? undefined : RoomFromJSON(json['room']),
    payId: !exists(json, 'payId') ? undefined : json['payId'],
  };
}

export function SpecialOrderToJSON(value?: SpecialOrder | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    status: OrderStatusToJSON(value.status),
    specialServiceId: value.specialServiceId,
    roomOrderId: value.roomOrderId,
    userId: value.userId,
    detail: SpecialOrderDetailToJSON(value.detail),
    specialService: SpecialServiceToJSON(value.specialService),
    room: RoomToJSON(value.room),
  };
}
