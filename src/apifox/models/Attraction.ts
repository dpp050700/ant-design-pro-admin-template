/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Language } from './Language';
import { LanguageFromJSON, LanguageFromJSONTyped, LanguageToJSON } from './Language';

/**
 *
 * @export
 * @interface Attraction
 */
export interface Attraction {
  /**
   *
   * @type {string}
   * @memberof Attraction
   */
  readonly id: string;
  /**
   *
   * @type {Date}
   * @memberof Attraction
   */
  readonly createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof Attraction
   */
  readonly updatedAt: Date;
  /**
   *
   * @type {string}
   * @memberof Attraction
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Attraction
   */
  catalog?: string | null;
  /**
   *
   * @type {string}
   * @memberof Attraction
   */
  country: string;
  /**
   *
   * @type {string}
   * @memberof Attraction
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof Attraction
   */
  address: string;
  /**
   *
   * @type {number}
   * @memberof Attraction
   */
  latitude: number;
  /**
   *
   * @type {number}
   * @memberof Attraction
   */
  longitude: number;
  /**
   *
   * @type {Array<string>}
   * @memberof Attraction
   */
  images?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Attraction
   */
  description?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof Attraction
   */
  readonly nearbyRooms?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof Attraction
   */
  readonly nearbyRoomCount?: number | null;
  /**
   *
   * @type {number}
   * @memberof Attraction
   */
  readonly distance?: number | null;
  /**
   *
   * @type {Language}
   * @memberof Attraction
   */
  language?: Language;
  /**
   *
   * @type {boolean}
   * @memberof Attraction
   */
  readonly isTopped?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof Attraction
   */
  readonly isMaster?: boolean | null;
  /**
   *
   * @type {Array<Attraction>}
   * @memberof Attraction
   */
  readonly children?: Array<Attraction>;
}

/**
 * Check if a given object implements the Attraction interface.
 */
export function instanceOfAttraction(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'updatedAt' in value;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'country' in value;
  isInstance = isInstance && 'city' in value;
  isInstance = isInstance && 'address' in value;
  isInstance = isInstance && 'latitude' in value;
  isInstance = isInstance && 'longitude' in value;

  return isInstance;
}

export function AttractionFromJSON(json: any): Attraction {
  return AttractionFromJSONTyped(json, false);
}

export function AttractionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Attraction {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    createdAt: new Date(json['createdAt']),
    updatedAt: new Date(json['updatedAt']),
    name: json['name'],
    catalog: !exists(json, 'catalog') ? undefined : json['catalog'],
    country: json['country'],
    city: json['city'],
    address: json['address'],
    latitude: json['latitude'],
    longitude: json['longitude'],
    images: !exists(json, 'images') ? undefined : json['images'],
    description: !exists(json, 'description') ? undefined : json['description'],
    nearbyRooms: !exists(json, 'nearbyRooms') ? undefined : json['nearbyRooms'],
    nearbyRoomCount: !exists(json, 'nearbyRoomCount') ? undefined : json['nearbyRoomCount'],
    distance: !exists(json, 'distance') ? undefined : json['distance'],
    language: !exists(json, 'language') ? undefined : LanguageFromJSON(json['language']),
    isTopped: !exists(json, 'isTopped') ? undefined : json['isTopped'],
    isMaster: !exists(json, 'isMaster') ? undefined : json['isMaster'],
    children: !exists(json, 'children')
      ? undefined
      : (json['children'] as Array<any>).map(AttractionFromJSON),
  };
}

export function AttractionToJSON(value?: Attraction | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    catalog: value.catalog,
    country: value.country,
    city: value.city,
    address: value.address,
    latitude: value.latitude,
    longitude: value.longitude,
    images: value.images,
    description: value.description,
    language: LanguageToJSON(value.language),
  };
}
