/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Attraction } from './Attraction';
import { AttractionFromJSON, AttractionFromJSONTyped, AttractionToJSON } from './Attraction';
import type { Catalog } from './Catalog';
import { CatalogFromJSON, CatalogFromJSONTyped, CatalogToJSON } from './Catalog';
import type { Language } from './Language';
import { LanguageFromJSON, LanguageFromJSONTyped, LanguageToJSON } from './Language';
import type { RoomComment } from './RoomComment';
import { RoomCommentFromJSON, RoomCommentFromJSONTyped, RoomCommentToJSON } from './RoomComment';
import type { RoomDetail } from './RoomDetail';
import { RoomDetailFromJSON, RoomDetailFromJSONTyped, RoomDetailToJSON } from './RoomDetail';
import type { RoomInfra } from './RoomInfra';
import { RoomInfraFromJSON, RoomInfraFromJSONTyped, RoomInfraToJSON } from './RoomInfra';
import type { RoomStatus } from './RoomStatus';
import { RoomStatusFromJSON, RoomStatusFromJSONTyped, RoomStatusToJSON } from './RoomStatus';
import type { SpecialService } from './SpecialService';
import {
  SpecialServiceFromJSON,
  SpecialServiceFromJSONTyped,
  SpecialServiceToJSON,
} from './SpecialService';
import type { SpecialServiceCatalog } from './SpecialServiceCatalog';
import {
  SpecialServiceCatalogFromJSON,
  SpecialServiceCatalogFromJSONTyped,
  SpecialServiceCatalogToJSON,
} from './SpecialServiceCatalog';
import type { V1Tag } from './V1Tag';
import { V1TagFromJSON, V1TagFromJSONTyped, V1TagToJSON } from './V1Tag';

/**
 *
 * @export
 * @interface Room
 */
export interface Room {
  /**
   *
   * @type {string}
   * @memberof Room
   */
  readonly id: string;
  /**
   *
   * @type {Date}
   * @memberof Room
   */
  readonly createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof Room
   */
  readonly updatedAt: Date;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  country: string;
  /**
   *
   * @type {Catalog}
   * @memberof Room
   */
  catalog?: Catalog;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  address: string;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  price: string;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  unit: string;
  /**
   *
   * @type {number}
   * @memberof Room
   */
  readonly rating: number;
  /**
   *
   * @type {Array<string>}
   * @memberof Room
   */
  images?: Array<string>;
  /**
   *
   * @type {RoomDetail}
   * @memberof Room
   */
  detail?: RoomDetail;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof Room
   */
  latitude?: number | null;
  /**
   *
   * @type {number}
   * @memberof Room
   */
  longitude?: number | null;
  /**
   *
   * @type {Array<RoomComment>}
   * @memberof Room
   */
  readonly comments?: Array<RoomComment>;
  /**
   *
   * @type {number}
   * @memberof Room
   */
  readonly commentTotal?: number;
  /**
   *
   * @type {Array<Attraction>}
   * @memberof Room
   */
  readonly nearbyAttractions?: Array<Attraction>;
  /**
   *
   * @type {Array<string>}
   * @memberof Room
   */
  nearbyAttractionIds?: Array<string>;
  /**
   *
   * @type {RoomStatus}
   * @memberof Room
   */
  status?: RoomStatus;
  /**
   *
   * @type {Array<string>}
   * @memberof Room
   */
  specialServiceIds?: Array<string>;
  /**
   *
   * @type {Array<SpecialService>}
   * @memberof Room
   */
  readonly specialServices?: Array<SpecialService>;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  readonly bookmarkId?: string | null;
  /**
   *
   * @type {number}
   * @memberof Room
   */
  readonly bookmarkCount?: number | null;
  /**
   *
   * @type {Array<string>}
   * @memberof Room
   */
  videos?: Array<string>;
  /**
   *
   * @type {Array<V1Tag>}
   * @memberof Room
   */
  catalogs?: Array<V1Tag>;
  /**
   *
   * @type {Array<string>}
   * @memberof Room
   */
  catalogNames?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Room
   */
  specialServiceCatalogIds?: Array<string>;
  /**
   *
   * @type {Array<SpecialServiceCatalog>}
   * @memberof Room
   */
  readonly specialServiceCatalogs?: Array<SpecialServiceCatalog>;
  /**
   *
   * @type {Language}
   * @memberof Room
   */
  language?: Language;
  /**
   *
   * @type {boolean}
   * @memberof Room
   */
  readonly isTopped?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  readonly curPrice?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof Room
   */
  readonly bookable?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof Room
   */
  readonly isMaster?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  readonly parentId?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof Room
   */
  readonly children?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  readonly crawlerId?: string | null;
  /**
   *
   * @type {Array<RoomInfra>}
   * @memberof Room
   */
  readonly infraList?: Array<RoomInfra>;
  /**
   *
   * @type {Array<string>}
   * @memberof Room
   */
  infraIds?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  readonly localPrice?: string | null;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  addressDesc?: string | null;
  /**
   *
   * @type {string}
   * @memberof Room
   */
  rawJson?: string | null;
}

/**
 * Check if a given object implements the Room interface.
 */
export function instanceOfRoom(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'updatedAt' in value;
  isInstance = isInstance && 'title' in value;
  isInstance = isInstance && 'city' in value;
  isInstance = isInstance && 'country' in value;
  isInstance = isInstance && 'address' in value;
  isInstance = isInstance && 'price' in value;
  isInstance = isInstance && 'unit' in value;
  isInstance = isInstance && 'rating' in value;

  return isInstance;
}

export function RoomFromJSON(json: any): Room {
  return RoomFromJSONTyped(json, false);
}

export function RoomFromJSONTyped(json: any, ignoreDiscriminator: boolean): Room {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    createdAt: new Date(json['createdAt']),
    updatedAt: new Date(json['updatedAt']),
    title: json['title'],
    city: json['city'],
    country: json['country'],
    catalog: !exists(json, 'catalog') ? undefined : CatalogFromJSON(json['catalog']),
    address: json['address'],
    price: json['price'],
    unit: json['unit'],
    rating: json['rating'],
    images: !exists(json, 'images') ? undefined : json['images'],
    detail: !exists(json, 'detail') ? undefined : RoomDetailFromJSON(json['detail']),
    description: !exists(json, 'description') ? undefined : json['description'],
    latitude: !exists(json, 'latitude') ? undefined : json['latitude'],
    longitude: !exists(json, 'longitude') ? undefined : json['longitude'],
    comments: !exists(json, 'comments')
      ? undefined
      : (json['comments'] as Array<any>).map(RoomCommentFromJSON),
    commentTotal: !exists(json, 'commentTotal') ? undefined : json['commentTotal'],
    nearbyAttractions: !exists(json, 'nearbyAttractions')
      ? undefined
      : (json['nearbyAttractions'] as Array<any>).map(AttractionFromJSON),
    nearbyAttractionIds: !exists(json, 'nearbyAttractionIds')
      ? undefined
      : json['nearbyAttractionIds'],
    status: !exists(json, 'status') ? undefined : RoomStatusFromJSON(json['status']),
    specialServiceIds: !exists(json, 'specialServiceIds') ? undefined : json['specialServiceIds'],
    specialServices: !exists(json, 'specialServices')
      ? undefined
      : (json['specialServices'] as Array<any>).map(SpecialServiceFromJSON),
    bookmarkId: !exists(json, 'bookmarkId') ? undefined : json['bookmarkId'],
    bookmarkCount: !exists(json, 'bookmarkCount') ? undefined : json['bookmarkCount'],
    videos: !exists(json, 'videos') ? undefined : json['videos'],
    catalogs: !exists(json, 'catalogs')
      ? undefined
      : (json['catalogs'] as Array<any>).map(V1TagFromJSON),
    catalogNames: !exists(json, 'catalogNames') ? undefined : json['catalogNames'],
    specialServiceCatalogIds: !exists(json, 'specialServiceCatalogIds')
      ? undefined
      : json['specialServiceCatalogIds'],
    specialServiceCatalogs: !exists(json, 'specialServiceCatalogs')
      ? undefined
      : (json['specialServiceCatalogs'] as Array<any>).map(SpecialServiceCatalogFromJSON),
    language: !exists(json, 'language') ? undefined : LanguageFromJSON(json['language']),
    isTopped: !exists(json, 'isTopped') ? undefined : json['isTopped'],
    curPrice: !exists(json, 'curPrice') ? undefined : json['curPrice'],
    bookable: !exists(json, 'bookable') ? undefined : json['bookable'],
    isMaster: !exists(json, 'isMaster') ? undefined : json['isMaster'],
    parentId: !exists(json, 'parentId') ? undefined : json['parentId'],
    children: !exists(json, 'children') ? undefined : json['children'],
    crawlerId: !exists(json, 'crawlerId') ? undefined : json['crawlerId'],
    infraList: !exists(json, 'infraList')
      ? undefined
      : (json['infraList'] as Array<any>).map(RoomInfraFromJSON),
    infraIds: !exists(json, 'infraIds') ? undefined : json['infraIds'],
    localPrice: !exists(json, 'localPrice') ? undefined : json['localPrice'],
    addressDesc: !exists(json, 'addressDesc') ? undefined : json['addressDesc'],
    rawJson: !exists(json, 'rawJson') ? undefined : json['rawJson'],
  };
}

export function RoomToJSON(value?: Room | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    title: value.title,
    city: value.city,
    country: value.country,
    catalog: CatalogToJSON(value.catalog),
    address: value.address,
    price: value.price,
    unit: value.unit,
    images: value.images,
    detail: RoomDetailToJSON(value.detail),
    description: value.description,
    latitude: value.latitude,
    longitude: value.longitude,
    nearbyAttractionIds: value.nearbyAttractionIds,
    status: RoomStatusToJSON(value.status),
    specialServiceIds: value.specialServiceIds,
    videos: value.videos,
    catalogs:
      value.catalogs === undefined ? undefined : (value.catalogs as Array<any>).map(V1TagToJSON),
    catalogNames: value.catalogNames,
    specialServiceCatalogIds: value.specialServiceCatalogIds,
    language: LanguageToJSON(value.language),
    infraIds: value.infraIds,
    addressDesc: value.addressDesc,
    rawJson: value.rawJson,
  };
}
