/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserInfo } from './UserInfo';
import { UserInfoFromJSON, UserInfoFromJSONTyped, UserInfoToJSON } from './UserInfo';

/**
 *
 * @export
 * @interface StoryComment
 */
export interface StoryComment {
  /**
   *
   * @type {string}
   * @memberof StoryComment
   */
  readonly id: string;
  /**
   *
   * @type {Date}
   * @memberof StoryComment
   */
  readonly createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof StoryComment
   */
  readonly updatedAt: Date;
  /**
   *
   * @type {UserInfo}
   * @memberof StoryComment
   */
  userInfo: UserInfo;
  /**
   *
   * @type {string}
   * @memberof StoryComment
   */
  parentId?: string | null;
  /**
   *
   * @type {string}
   * @memberof StoryComment
   */
  userId?: string;
  /**
   *
   * @type {string}
   * @memberof StoryComment
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof StoryComment
   */
  readonly storyId: string | null;
}

/**
 * Check if a given object implements the StoryComment interface.
 */
export function instanceOfStoryComment(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'updatedAt' in value;
  isInstance = isInstance && 'userInfo' in value;
  isInstance = isInstance && 'comment' in value;
  isInstance = isInstance && 'storyId' in value;

  return isInstance;
}

export function StoryCommentFromJSON(json: any): StoryComment {
  return StoryCommentFromJSONTyped(json, false);
}

export function StoryCommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoryComment {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    createdAt: new Date(json['createdAt']),
    updatedAt: new Date(json['updatedAt']),
    userInfo: UserInfoFromJSON(json['userInfo']),
    parentId: !exists(json, 'parentId') ? undefined : json['parentId'],
    userId: !exists(json, 'userId') ? undefined : json['userId'],
    comment: json['comment'],
    storyId: json['storyId'],
  };
}

export function StoryCommentToJSON(value?: StoryComment | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    userInfo: UserInfoToJSON(value.userInfo),
    parentId: value.parentId,
    userId: value.userId,
    comment: value.comment,
  };
}
