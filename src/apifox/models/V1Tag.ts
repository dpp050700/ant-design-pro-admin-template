/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Language } from './Language';
import { LanguageFromJSON, LanguageFromJSONTyped, LanguageToJSON } from './Language';
import type { TagKind } from './TagKind';
import { TagKindFromJSON, TagKindFromJSONTyped, TagKindToJSON } from './TagKind';

/**
 *
 * @export
 * @interface V1Tag
 */
export interface V1Tag {
  /**
   *
   * @type {string}
   * @memberof V1Tag
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof V1Tag
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof V1Tag
   */
  backColor?: string | null;
  /**
   *
   * @type {string}
   * @memberof V1Tag
   */
  fontColor?: string | null;
  /**
   *
   * @type {Language}
   * @memberof V1Tag
   */
  language?: Language;
  /**
   *
   * @type {TagKind}
   * @memberof V1Tag
   */
  kind?: TagKind;
}

/**
 * Check if a given object implements the V1Tag interface.
 */
export function instanceOfV1Tag(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function V1TagFromJSON(json: any): V1Tag {
  return V1TagFromJSONTyped(json, false);
}

export function V1TagFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Tag {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    backColor: !exists(json, 'backColor') ? undefined : json['backColor'],
    fontColor: !exists(json, 'fontColor') ? undefined : json['fontColor'],
    language: !exists(json, 'language') ? undefined : LanguageFromJSON(json['language']),
    kind: !exists(json, 'kind') ? undefined : TagKindFromJSON(json['kind']),
  };
}

export function V1TagToJSON(value?: V1Tag | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    backColor: value.backColor,
    fontColor: value.fontColor,
    language: LanguageToJSON(value.language),
    kind: TagKindToJSON(value.kind),
  };
}
