/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Attraction } from './Attraction';
import { AttractionFromJSON, AttractionFromJSONTyped, AttractionToJSON } from './Attraction';
import type { Language } from './Language';
import { LanguageFromJSON, LanguageFromJSONTyped, LanguageToJSON } from './Language';
import type { Room } from './Room';
import { RoomFromJSON, RoomFromJSONTyped, RoomToJSON } from './Room';
import type { SpecialService } from './SpecialService';
import {
  SpecialServiceFromJSON,
  SpecialServiceFromJSONTyped,
  SpecialServiceToJSON,
} from './SpecialService';
import type { StoryComment } from './StoryComment';
import {
  StoryCommentFromJSON,
  StoryCommentFromJSONTyped,
  StoryCommentToJSON,
} from './StoryComment';
import type { StoryDetail } from './StoryDetail';
import { StoryDetailFromJSON, StoryDetailFromJSONTyped, StoryDetailToJSON } from './StoryDetail';
import type { StoryKind } from './StoryKind';
import { StoryKindFromJSON, StoryKindFromJSONTyped, StoryKindToJSON } from './StoryKind';
import type { StoryOperation } from './StoryOperation';
import {
  StoryOperationFromJSON,
  StoryOperationFromJSONTyped,
  StoryOperationToJSON,
} from './StoryOperation';
import type { StoryStatus } from './StoryStatus';
import { StoryStatusFromJSON, StoryStatusFromJSONTyped, StoryStatusToJSON } from './StoryStatus';
import type { UserInfo } from './UserInfo';
import { UserInfoFromJSON, UserInfoFromJSONTyped, UserInfoToJSON } from './UserInfo';

/**
 *
 * @export
 * @interface Story
 */
export interface Story {
  /**
   *
   * @type {string}
   * @memberof Story
   */
  readonly id: string;
  /**
   *
   * @type {string}
   * @memberof Story
   */
  article: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Story
   */
  images: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Story
   */
  roomIds?: Array<string>;
  /**
   *
   * @type {UserInfo}
   * @memberof Story
   */
  userInfo: UserInfo;
  /**
   *
   * @type {StoryKind}
   * @memberof Story
   */
  kind: StoryKind;
  /**
   *
   * @type {StoryStatus}
   * @memberof Story
   */
  status: StoryStatus;
  /**
   *
   * @type {number}
   * @memberof Story
   */
  readonly likeCount?: number | null;
  /**
   *
   * @type {number}
   * @memberof Story
   */
  readonly commentCount?: number | null;
  /**
   *
   * @type {string}
   * @memberof Story
   */
  title?: string | null;
  /**
   *
   * @type {string}
   * @memberof Story
   */
  country?: string | null;
  /**
   *
   * @type {string}
   * @memberof Story
   */
  city?: string | null;
  /**
   *
   * @type {string}
   * @memberof Story
   */
  userId?: string;
  /**
   *
   * @type {boolean}
   * @memberof Story
   */
  readonly isTopped?: boolean;
  /**
   *
   * @type {Array<StoryOperation>}
   * @memberof Story
   */
  readonly operations?: Array<StoryOperation>;
  /**
   *
   * @type {Array<StoryComment>}
   * @memberof Story
   */
  readonly comments?: Array<StoryComment>;
  /**
   *
   * @type {Date}
   * @memberof Story
   */
  readonly createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Story
   */
  readonly updatedAt?: Date;
  /**
   *
   * @type {string}
   * @memberof Story
   */
  address?: string;
  /**
   *
   * @type {StoryDetail}
   * @memberof Story
   */
  detail?: StoryDetail;
  /**
   *
   * @type {Array<Room>}
   * @memberof Story
   */
  readonly rooms?: Array<Room>;
  /**
   *
   * @type {Array<SpecialService>}
   * @memberof Story
   */
  readonly services?: Array<SpecialService>;
  /**
   *
   * @type {Array<string>}
   * @memberof Story
   */
  serviceIds?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Story
   */
  readonly bookmarkId?: string | null;
  /**
   *
   * @type {string}
   * @memberof Story
   */
  readonly likeId?: string | null;
  /**
   *
   * @type {number}
   * @memberof Story
   */
  readonly bookmarkCount?: number | null;
  /**
   *
   * @type {Language}
   * @memberof Story
   */
  language?: Language;
  /**
   *
   * @type {string}
   * @memberof Story
   */
  attractionId?: string | null;
  /**
   *
   * @type {Attraction}
   * @memberof Story
   */
  attraction?: Attraction;
}

/**
 * Check if a given object implements the Story interface.
 */
export function instanceOfStory(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'article' in value;
  isInstance = isInstance && 'images' in value;
  isInstance = isInstance && 'userInfo' in value;
  isInstance = isInstance && 'kind' in value;
  isInstance = isInstance && 'status' in value;

  return isInstance;
}

export function StoryFromJSON(json: any): Story {
  return StoryFromJSONTyped(json, false);
}

export function StoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Story {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    article: json['article'],
    images: json['images'],
    roomIds: !exists(json, 'roomIds') ? undefined : json['roomIds'],
    userInfo: UserInfoFromJSON(json['userInfo']),
    kind: StoryKindFromJSON(json['kind']),
    status: StoryStatusFromJSON(json['status']),
    likeCount: !exists(json, 'likeCount') ? undefined : json['likeCount'],
    commentCount: !exists(json, 'commentCount') ? undefined : json['commentCount'],
    title: !exists(json, 'title') ? undefined : json['title'],
    country: !exists(json, 'country') ? undefined : json['country'],
    city: !exists(json, 'city') ? undefined : json['city'],
    userId: !exists(json, 'userId') ? undefined : json['userId'],
    isTopped: !exists(json, 'isTopped') ? undefined : json['isTopped'],
    operations: !exists(json, 'operations')
      ? undefined
      : (json['operations'] as Array<any>).map(StoryOperationFromJSON),
    comments: !exists(json, 'comments')
      ? undefined
      : (json['comments'] as Array<any>).map(StoryCommentFromJSON),
    createdAt: !exists(json, 'createdAt') ? undefined : new Date(json['createdAt']),
    updatedAt: !exists(json, 'updatedAt') ? undefined : new Date(json['updatedAt']),
    address: !exists(json, 'address') ? undefined : json['address'],
    detail: !exists(json, 'detail') ? undefined : StoryDetailFromJSON(json['detail']),
    rooms: !exists(json, 'rooms') ? undefined : (json['rooms'] as Array<any>).map(RoomFromJSON),
    services: !exists(json, 'services')
      ? undefined
      : (json['services'] as Array<any>).map(SpecialServiceFromJSON),
    serviceIds: !exists(json, 'serviceIds') ? undefined : json['serviceIds'],
    bookmarkId: !exists(json, 'bookmarkId') ? undefined : json['bookmarkId'],
    likeId: !exists(json, 'likeId') ? undefined : json['likeId'],
    bookmarkCount: !exists(json, 'bookmarkCount') ? undefined : json['bookmarkCount'],
    language: !exists(json, 'language') ? undefined : LanguageFromJSON(json['language']),
    attractionId: !exists(json, 'attractionId') ? undefined : json['attractionId'],
    attraction: !exists(json, 'attraction') ? undefined : AttractionFromJSON(json['attraction']),
  };
}

export function StoryToJSON(value?: Story | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    article: value.article,
    images: value.images,
    roomIds: value.roomIds,
    userInfo: UserInfoToJSON(value.userInfo),
    kind: StoryKindToJSON(value.kind),
    status: StoryStatusToJSON(value.status),
    title: value.title,
    country: value.country,
    city: value.city,
    userId: value.userId,
    address: value.address,
    detail: StoryDetailToJSON(value.detail),
    serviceIds: value.serviceIds,
    language: LanguageToJSON(value.language),
    attractionId: value.attractionId,
    attraction: AttractionToJSON(value.attraction),
  };
}
