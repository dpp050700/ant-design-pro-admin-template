/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Balance } from './Balance';
import { BalanceFromJSON, BalanceFromJSONTyped, BalanceToJSON } from './Balance';
import type { Coupon } from './Coupon';
import { CouponFromJSON, CouponFromJSONTyped, CouponToJSON } from './Coupon';
import type { CouponLevel } from './CouponLevel';
import { CouponLevelFromJSON, CouponLevelFromJSONTyped, CouponLevelToJSON } from './CouponLevel';
import type { Details } from './Details';
import { DetailsFromJSON, DetailsFromJSONTyped, DetailsToJSON } from './Details';
import type { Language } from './Language';
import { LanguageFromJSON, LanguageFromJSONTyped, LanguageToJSON } from './Language';
import type { UserGender } from './UserGender';
import { UserGenderFromJSON, UserGenderFromJSONTyped, UserGenderToJSON } from './UserGender';

/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  readonly id: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  readonly role: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  readonly email: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  readonly status: string;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  readonly lastLogin: Date;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  readonly createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  readonly updatedAt: Date;
  /**
   *
   * @type {string}
   * @memberof User
   */
  nickname?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  timezone?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  mobile?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  avatar?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  birthday?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  digitalWallet?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  passportId?: string | null;
  /**
   *
   * @type {UserGender}
   * @memberof User
   */
  gender?: UserGender;
  /**
   *
   * @type {Language}
   * @memberof User
   */
  language?: Language;
  /**
   *
   * @type {Array<Balance>}
   * @memberof User
   */
  balance?: Array<Balance>;
  /**
   *
   * @type {Array<Coupon>}
   * @memberof User
   */
  readonly coupons?: Array<Coupon>;
  /**
   *
   * @type {string}
   * @memberof User
   */
  readonly inviteCode?: string | null;
  /**
   *
   * @type {number}
   * @memberof User
   */
  readonly bookmarkCount?: number | null;
  /**
   *
   * @type {number}
   * @memberof User
   */
  readonly usdtTotal?: number;
  /**
   *
   * @type {number}
   * @memberof User
   */
  readonly ctcTotal?: number;
  /**
   *
   * @type {number}
   * @memberof User
   */
  readonly dollarTotal?: number;
  /**
   *
   * @type {number}
   * @memberof User
   */
  readonly cjpActiveTotal?: number | null;
  /**
   *
   * @type {number}
   * @memberof User
   */
  readonly cjpFreezeTotal?: number | null;
  /**
   *
   * @type {number}
   * @memberof User
   */
  readonly cjpTotal?: number | null;
  /**
   *
   * @type {CouponLevel}
   * @memberof User
   */
  level?: CouponLevel;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  hasOrder?: boolean;
  /**
   *
   * @type {Details}
   * @memberof User
   */
  detail?: Details;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'role' in value;
  isInstance = isInstance && 'email' in value;
  isInstance = isInstance && 'status' in value;
  isInstance = isInstance && 'lastLogin' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'updatedAt' in value;

  return isInstance;
}

export function UserFromJSON(json: any): User {
  return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    role: json['role'],
    email: json['email'],
    status: json['status'],
    lastLogin: new Date(json['lastLogin']),
    createdAt: new Date(json['createdAt']),
    updatedAt: new Date(json['updatedAt']),
    nickname: !exists(json, 'nickname') ? undefined : json['nickname'],
    timezone: !exists(json, 'timezone') ? undefined : json['timezone'],
    description: !exists(json, 'description') ? undefined : json['description'],
    mobile: !exists(json, 'mobile') ? undefined : json['mobile'],
    avatar: !exists(json, 'avatar') ? undefined : json['avatar'],
    birthday: !exists(json, 'birthday') ? undefined : json['birthday'],
    digitalWallet: !exists(json, 'digitalWallet') ? undefined : json['digitalWallet'],
    passportId: !exists(json, 'passportId') ? undefined : json['passportId'],
    gender: !exists(json, 'gender') ? undefined : UserGenderFromJSON(json['gender']),
    language: !exists(json, 'language') ? undefined : LanguageFromJSON(json['language']),
    balance: !exists(json, 'balance')
      ? undefined
      : (json['balance'] as Array<any>).map(BalanceFromJSON),
    coupons: !exists(json, 'coupons')
      ? undefined
      : (json['coupons'] as Array<any>).map(CouponFromJSON),
    inviteCode: !exists(json, 'inviteCode') ? undefined : json['inviteCode'],
    bookmarkCount: !exists(json, 'bookmarkCount') ? undefined : json['bookmarkCount'],
    usdtTotal: !exists(json, 'usdtTotal') ? undefined : json['usdtTotal'],
    ctcTotal: !exists(json, 'ctcTotal') ? undefined : json['ctcTotal'],
    dollarTotal: !exists(json, 'dollarTotal') ? undefined : json['dollarTotal'],
    cjpActiveTotal: !exists(json, 'cjpActiveTotal') ? undefined : json['cjpActiveTotal'],
    cjpFreezeTotal: !exists(json, 'cjpFreezeTotal') ? undefined : json['cjpFreezeTotal'],
    cjpTotal: !exists(json, 'cjpTotal') ? undefined : json['cjpTotal'],
    level: !exists(json, 'level') ? undefined : CouponLevelFromJSON(json['level']),
    hasOrder: !exists(json, 'hasOrder') ? undefined : json['hasOrder'],
    detail: !exists(json, 'detail') ? undefined : DetailsFromJSON(json['detail']),
  };
}

export function UserToJSON(value?: User | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    nickname: value.nickname,
    timezone: value.timezone,
    description: value.description,
    mobile: value.mobile,
    avatar: value.avatar,
    birthday: value.birthday,
    digitalWallet: value.digitalWallet,
    passportId: value.passportId,
    gender: UserGenderToJSON(value.gender),
    language: LanguageToJSON(value.language),
    balance:
      value.balance === undefined ? undefined : (value.balance as Array<any>).map(BalanceToJSON),
    level: CouponLevelToJSON(value.level),
    hasOrder: value.hasOrder,
    detail: DetailsToJSON(value.detail),
  };
}
