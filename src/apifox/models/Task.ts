/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TaskStatus } from './TaskStatus';
import { TaskStatusFromJSON, TaskStatusFromJSONTyped, TaskStatusToJSON } from './TaskStatus';

/**
 *
 * @export
 * @interface Task
 */
export interface Task {
  /**
   *
   * @type {string}
   * @memberof Task
   */
  readonly id: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  queue: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  args?: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  userId?: string | null;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  errDetail?: string | null;
  /**
   *
   * @type {TaskStatus}
   * @memberof Task
   */
  status?: TaskStatus;
  /**
   *
   * @type {number}
   * @memberof Task
   */
  readonly remainingAttempts?: number;
  /**
   *
   * @type {Date}
   * @memberof Task
   */
  readonly createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Task
   */
  readonly updatedAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Task
   */
  readonly runAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Task
   */
  readonly finishedAt?: Date | null;
  /**
   *
   * @type {Date}
   * @memberof Task
   */
  readonly timeoutAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Task
   */
  readonly expiredAt?: Date;
}

/**
 * Check if a given object implements the Task interface.
 */
export function instanceOfTask(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'queue' in value;

  return isInstance;
}

export function TaskFromJSON(json: any): Task {
  return TaskFromJSONTyped(json, false);
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    queue: json['queue'],
    args: !exists(json, 'args') ? undefined : json['args'],
    userId: !exists(json, 'userId') ? undefined : json['userId'],
    errDetail: !exists(json, 'errDetail') ? undefined : json['errDetail'],
    status: !exists(json, 'status') ? undefined : TaskStatusFromJSON(json['status']),
    remainingAttempts: !exists(json, 'remainingAttempts') ? undefined : json['remainingAttempts'],
    createdAt: !exists(json, 'createdAt') ? undefined : new Date(json['createdAt']),
    updatedAt: !exists(json, 'updatedAt') ? undefined : new Date(json['updatedAt']),
    runAt: !exists(json, 'runAt') ? undefined : new Date(json['runAt']),
    finishedAt: !exists(json, 'finishedAt')
      ? undefined
      : json['finishedAt'] === null
      ? null
      : new Date(json['finishedAt']),
    timeoutAt: !exists(json, 'timeoutAt') ? undefined : new Date(json['timeoutAt']),
    expiredAt: !exists(json, 'expiredAt') ? undefined : new Date(json['expiredAt']),
  };
}

export function TaskToJSON(value?: Task | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    queue: value.queue,
    args: value.args,
    userId: value.userId,
    errDetail: value.errDetail,
    status: TaskStatusToJSON(value.status),
  };
}
