/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Language } from './Language';
import { LanguageFromJSON, LanguageFromJSONTyped, LanguageToJSON } from './Language';

/**
 *
 * @export
 * @interface RollerAnnouncement
 */
export interface RollerAnnouncement {
  /**
   *
   * @type {string}
   * @memberof RollerAnnouncement
   */
  desc: string;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof RollerAnnouncement
   */
  details?: { [key: string]: string };
  /**
   *
   * @type {string}
   * @memberof RollerAnnouncement
   */
  id?: string | null;
  /**
   *
   * @type {Language}
   * @memberof RollerAnnouncement
   */
  language?: Language;
}

/**
 * Check if a given object implements the RollerAnnouncement interface.
 */
export function instanceOfRollerAnnouncement(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'desc' in value;

  return isInstance;
}

export function RollerAnnouncementFromJSON(json: any): RollerAnnouncement {
  return RollerAnnouncementFromJSONTyped(json, false);
}

export function RollerAnnouncementFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): RollerAnnouncement {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    desc: json['desc'],
    details: !exists(json, 'details') ? undefined : json['details'],
    id: !exists(json, 'id') ? undefined : json['id'],
    language: !exists(json, 'language') ? undefined : LanguageFromJSON(json['language']),
  };
}

export function RollerAnnouncementToJSON(value?: RollerAnnouncement | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    desc: value.desc,
    details: value.details,
    id: value.id,
    language: LanguageToJSON(value.language),
  };
}
