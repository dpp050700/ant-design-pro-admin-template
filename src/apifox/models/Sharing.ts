/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ResData } from './ResData';
import { ResDataFromJSON, ResDataFromJSONTyped, ResDataToJSON } from './ResData';
import type { ResKind } from './ResKind';
import { ResKindFromJSON, ResKindFromJSONTyped, ResKindToJSON } from './ResKind';
import type { UserInfo } from './UserInfo';
import { UserInfoFromJSON, UserInfoFromJSONTyped, UserInfoToJSON } from './UserInfo';

/**
 *
 * @export
 * @interface Sharing
 */
export interface Sharing {
  /**
   *
   * @type {string}
   * @memberof Sharing
   */
  readonly id: string;
  /**
   *
   * @type {string}
   * @memberof Sharing
   */
  readonly shareId: string;
  /**
   *
   * @type {Date}
   * @memberof Sharing
   */
  readonly createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof Sharing
   */
  readonly updatedAt: Date;
  /**
   *
   * @type {UserInfo}
   * @memberof Sharing
   */
  userInfo: UserInfo;
  /**
   *
   * @type {ResKind}
   * @memberof Sharing
   */
  resKind: ResKind;
  /**
   *
   * @type {string}
   * @memberof Sharing
   */
  resId: string;
  /**
   *
   * @type {ResData}
   * @memberof Sharing
   */
  resData: ResData;
}

/**
 * Check if a given object implements the Sharing interface.
 */
export function instanceOfSharing(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'shareId' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'updatedAt' in value;
  isInstance = isInstance && 'userInfo' in value;
  isInstance = isInstance && 'resKind' in value;
  isInstance = isInstance && 'resId' in value;
  isInstance = isInstance && 'resData' in value;

  return isInstance;
}

export function SharingFromJSON(json: any): Sharing {
  return SharingFromJSONTyped(json, false);
}

export function SharingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Sharing {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    shareId: json['shareId'],
    createdAt: new Date(json['createdAt']),
    updatedAt: new Date(json['updatedAt']),
    userInfo: UserInfoFromJSON(json['userInfo']),
    resKind: ResKindFromJSON(json['resKind']),
    resId: json['resId'],
    resData: ResDataFromJSON(json['resData']),
  };
}

export function SharingToJSON(value?: Sharing | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    userInfo: UserInfoToJSON(value.userInfo),
    resKind: ResKindToJSON(value.resKind),
    resId: value.resId,
    resData: ResDataToJSON(value.resData),
  };
}
