/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrderStatus } from './OrderStatus';
import { OrderStatusFromJSON, OrderStatusFromJSONTyped, OrderStatusToJSON } from './OrderStatus';

/**
 *
 * @export
 * @interface OrderMessage
 */
export interface OrderMessage {
  /**
   *
   * @type {string}
   * @memberof OrderMessage
   */
  readonly id: string;
  /**
   *
   * @type {Date}
   * @memberof OrderMessage
   */
  readonly createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof OrderMessage
   */
  readonly updatedAt: Date;
  /**
   *
   * @type {string}
   * @memberof OrderMessage
   */
  readonly userId: string;
  /**
   *
   * @type {string}
   * @memberof OrderMessage
   */
  readonly orderId: string;
  /**
   *
   * @type {string}
   * @memberof OrderMessage
   */
  serviceName?: string | null;
  /**
   *
   * @type {OrderStatus}
   * @memberof OrderMessage
   */
  status: OrderStatus;
  /**
   *
   * @type {string}
   * @memberof OrderMessage
   */
  roomName?: string | null;
  /**
   *
   * @type {string}
   * @memberof OrderMessage
   */
  snapshot?: string;
  /**
   *
   * @type {string}
   * @memberof OrderMessage
   */
  customerName?: string | null;
  /**
   *
   * @type {Date}
   * @memberof OrderMessage
   */
  orderTime?: Date;
}

/**
 * Check if a given object implements the OrderMessage interface.
 */
export function instanceOfOrderMessage(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'updatedAt' in value;
  isInstance = isInstance && 'userId' in value;
  isInstance = isInstance && 'orderId' in value;
  isInstance = isInstance && 'status' in value;

  return isInstance;
}

export function OrderMessageFromJSON(json: any): OrderMessage {
  return OrderMessageFromJSONTyped(json, false);
}

export function OrderMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderMessage {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    createdAt: new Date(json['createdAt']),
    updatedAt: new Date(json['updatedAt']),
    userId: json['userId'],
    orderId: json['orderId'],
    serviceName: !exists(json, 'serviceName') ? undefined : json['serviceName'],
    status: OrderStatusFromJSON(json['status']),
    roomName: !exists(json, 'roomName') ? undefined : json['roomName'],
    snapshot: !exists(json, 'snapshot') ? undefined : json['snapshot'],
    customerName: !exists(json, 'customerName') ? undefined : json['customerName'],
    orderTime: !exists(json, 'orderTime') ? undefined : new Date(json['orderTime']),
  };
}

export function OrderMessageToJSON(value?: OrderMessage | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    serviceName: value.serviceName,
    status: OrderStatusToJSON(value.status),
    roomName: value.roomName,
    snapshot: value.snapshot,
    customerName: value.customerName,
    orderTime: value.orderTime === undefined ? undefined : value.orderTime.toISOString(),
  };
}
