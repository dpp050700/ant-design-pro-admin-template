/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoleName } from './RoleName';
import { RoleNameFromJSON, RoleNameFromJSONTyped, RoleNameToJSON } from './RoleName';

/**
 *
 * @export
 * @interface AuthLoginResponse
 */
export interface AuthLoginResponse {
  /**
   *
   * @type {string}
   * @memberof AuthLoginResponse
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof AuthLoginResponse
   */
  jwtToken: string;
  /**
   *
   * @type {Date}
   * @memberof AuthLoginResponse
   */
  expired: Date;
  /**
   *
   * @type {RoleName}
   * @memberof AuthLoginResponse
   */
  role: RoleName;
}

/**
 * Check if a given object implements the AuthLoginResponse interface.
 */
export function instanceOfAuthLoginResponse(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'userId' in value;
  isInstance = isInstance && 'jwtToken' in value;
  isInstance = isInstance && 'expired' in value;
  isInstance = isInstance && 'role' in value;

  return isInstance;
}

export function AuthLoginResponseFromJSON(json: any): AuthLoginResponse {
  return AuthLoginResponseFromJSONTyped(json, false);
}

export function AuthLoginResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): AuthLoginResponse {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    userId: json['userId'],
    jwtToken: json['jwtToken'],
    expired: new Date(json['expired']),
    role: RoleNameFromJSON(json['role']),
  };
}

export function AuthLoginResponseToJSON(value?: AuthLoginResponse | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    userId: value.userId,
    jwtToken: value.jwtToken,
    expired: value.expired.toISOString(),
    role: RoleNameToJSON(value.role),
  };
}
