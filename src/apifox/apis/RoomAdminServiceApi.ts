/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  BatchRoomUpdateStatusReq,
  IdRsp,
  RollerAnnouncementList,
  RoomAdminServiceUpdateBody,
  RoomCrawlerCreateReq,
  RoomCrawlers,
  RoomCreateReq,
  RoomCreateSpecialServiceReq,
  RoomInfra,
  RoomInfraCatalogUpdateReq,
  RoomInfraList,
  RoomInfras,
  RoomUpdateDatePriceBody,
  RoomUpdateStatusBody,
  RpcStatus,
  ServiceCopyReq,
  SpecialServiceCatalog,
  UpdatePriceBody,
  UpdateSpecialServiceBody,
  UpdateSpecialServiceCatalogBody,
  V1ErrCode,
} from '../models/index';
import {
  BatchRoomUpdateStatusReqFromJSON,
  BatchRoomUpdateStatusReqToJSON,
  IdRspFromJSON,
  IdRspToJSON,
  RollerAnnouncementListFromJSON,
  RollerAnnouncementListToJSON,
  RoomAdminServiceUpdateBodyFromJSON,
  RoomAdminServiceUpdateBodyToJSON,
  RoomCrawlerCreateReqFromJSON,
  RoomCrawlerCreateReqToJSON,
  RoomCrawlersFromJSON,
  RoomCrawlersToJSON,
  RoomCreateReqFromJSON,
  RoomCreateReqToJSON,
  RoomCreateSpecialServiceReqFromJSON,
  RoomCreateSpecialServiceReqToJSON,
  RoomInfraFromJSON,
  RoomInfraToJSON,
  RoomInfraCatalogUpdateReqFromJSON,
  RoomInfraCatalogUpdateReqToJSON,
  RoomInfraListFromJSON,
  RoomInfraListToJSON,
  RoomInfrasFromJSON,
  RoomInfrasToJSON,
  RoomUpdateDatePriceBodyFromJSON,
  RoomUpdateDatePriceBodyToJSON,
  RoomUpdateStatusBodyFromJSON,
  RoomUpdateStatusBodyToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON,
  ServiceCopyReqFromJSON,
  ServiceCopyReqToJSON,
  SpecialServiceCatalogFromJSON,
  SpecialServiceCatalogToJSON,
  UpdatePriceBodyFromJSON,
  UpdatePriceBodyToJSON,
  UpdateSpecialServiceBodyFromJSON,
  UpdateSpecialServiceBodyToJSON,
  UpdateSpecialServiceCatalogBodyFromJSON,
  UpdateSpecialServiceCatalogBodyToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
} from '../models/index';

export interface RoomAdminServiceBatchRoomUpdateStatusRequest {
  body: BatchRoomUpdateStatusReq;
}

export interface RoomAdminServiceCloneRoomRequest {
  id: string;
}

export interface RoomAdminServiceCreateRequest {
  body: RoomCreateReq;
}

export interface RoomAdminServiceCreateRoomCrawlerRequest {
  body: RoomCrawlerCreateReq;
}

export interface RoomAdminServiceCreateSpecialServiceRequest {
  body: RoomCreateSpecialServiceReq;
}

export interface RoomAdminServiceCreateSpecialServiceCatalogRequest {
  body: SpecialServiceCatalog;
}

export interface RoomAdminServiceDeleteRequest {
  id: string;
}

export interface RoomAdminServiceDeleteRoomCrawlerRequest {
  id: string;
}

export interface RoomAdminServiceDeleteSpecialServiceRequest {
  id: string;
}

export interface RoomAdminServiceDeleteSpecialServiceCatalogRequest {
  id: string;
}

export interface RoomAdminServiceRollerAnnouncementDeleteRequest {
  id: string;
}

export interface RoomAdminServiceRollerAnnouncementSaveRequest {
  body: RollerAnnouncementList;
}

export interface RoomAdminServiceRoomCopyRequest {
  language?: Array<RoomAdminServiceRoomCopyLanguageEnum>;
  roomId?: string;
}

export interface RoomAdminServiceRoomCrawlerHandlerDataRequest {
  id: string;
}

export interface RoomAdminServiceRoomCrawlerListRequest {
  pageLimit?: number;
  pageOffset?: number;
  name?: string;
  status?: RoomAdminServiceRoomCrawlerListStatusEnum;
  link?: string;
  roomId?: string;
}

export interface RoomAdminServiceRoomCrawlerRetryRequest {
  id: string;
}

export interface RoomAdminServiceRoomDeleteDatePriceRequest {
  id: string;
}

export interface RoomAdminServiceRoomInfraBatchSaveRequest {
  body: RoomInfraList;
}

export interface RoomAdminServiceRoomInfraCatalogUpdateRequest {
  body: RoomInfraCatalogUpdateReq;
}

export interface RoomAdminServiceRoomInfraDeleteRequest {
  id: string;
}

export interface RoomAdminServiceRoomInfraFindRequest {
  language?: RoomAdminServiceRoomInfraFindLanguageEnum;
}

export interface RoomAdminServiceRoomInfraSaveRequest {
  body: RoomInfra;
}

export interface RoomAdminServiceRoomUpdateDatePriceRequest {
  roomId: string;
  body: RoomUpdateDatePriceBody;
}

export interface RoomAdminServiceRoomUpdateStatusRequest {
  id: string;
  body: RoomUpdateStatusBody;
}

export interface RoomAdminServiceServiceCopyRequest {
  body: ServiceCopyReq;
}

export interface RoomAdminServiceToppingRequest {
  id: string;
}

export interface RoomAdminServiceUnToppingRequest {
  id: string;
}

export interface RoomAdminServiceUpdateRequest {
  roomId: string;
  body: RoomAdminServiceUpdateBody;
}

export interface RoomAdminServiceUpdatePriceRequest {
  roomId: string;
  body: UpdatePriceBody;
}

export interface RoomAdminServiceUpdateSpecialServiceRequest {
  id: string;
  body: UpdateSpecialServiceBody;
}

export interface RoomAdminServiceUpdateSpecialServiceCatalogRequest {
  id: string;
  body: UpdateSpecialServiceCatalogBody;
}

/**
 *
 */
export class RoomAdminServiceApi extends runtime.BaseAPI {
  /**
   * 房源批量更新状态
   */
  async roomAdminServiceBatchRoomUpdateStatusRaw(
    requestParameters: RoomAdminServiceBatchRoomUpdateStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceBatchRoomUpdateStatus.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/rooms:status`,
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: BatchRoomUpdateStatusReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源批量更新状态
   */
  async roomAdminServiceBatchRoomUpdateStatus(
    requestParameters: RoomAdminServiceBatchRoomUpdateStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceBatchRoomUpdateStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 房源Clone
   */
  async roomAdminServiceCloneRoomRaw(
    requestParameters: RoomAdminServiceCloneRoomRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IdRsp>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceCloneRoom.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/room/{id}/clone`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdRspFromJSON(jsonValue));
  }

  /**
   * 房源Clone
   */
  async roomAdminServiceCloneRoom(
    requestParameters: RoomAdminServiceCloneRoomRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IdRsp> {
    const response = await this.roomAdminServiceCloneRoomRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 添加房间
   */
  async roomAdminServiceCreateRaw(
    requestParameters: RoomAdminServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IdRsp>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceCreate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/rooms`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RoomCreateReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdRspFromJSON(jsonValue));
  }

  /**
   * 添加房间
   */
  async roomAdminServiceCreate(
    requestParameters: RoomAdminServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IdRsp> {
    const response = await this.roomAdminServiceCreateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 房源爬虫添加
   */
  async roomAdminServiceCreateRoomCrawlerRaw(
    requestParameters: RoomAdminServiceCreateRoomCrawlerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceCreateRoomCrawler.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/crawler`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RoomCrawlerCreateReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源爬虫添加
   */
  async roomAdminServiceCreateRoomCrawler(
    requestParameters: RoomAdminServiceCreateRoomCrawlerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceCreateRoomCrawlerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 特色服务添加
   */
  async roomAdminServiceCreateSpecialServiceRaw(
    requestParameters: RoomAdminServiceCreateSpecialServiceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IdRsp>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceCreateSpecialService.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/special_service`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RoomCreateSpecialServiceReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdRspFromJSON(jsonValue));
  }

  /**
   * 特色服务添加
   */
  async roomAdminServiceCreateSpecialService(
    requestParameters: RoomAdminServiceCreateSpecialServiceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IdRsp> {
    const response = await this.roomAdminServiceCreateSpecialServiceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 创建特色服务分类
   */
  async roomAdminServiceCreateSpecialServiceCatalogRaw(
    requestParameters: RoomAdminServiceCreateSpecialServiceCatalogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IdRsp>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceCreateSpecialServiceCatalog.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/special_service_catalog`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SpecialServiceCatalogToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdRspFromJSON(jsonValue));
  }

  /**
   * 创建特色服务分类
   */
  async roomAdminServiceCreateSpecialServiceCatalog(
    requestParameters: RoomAdminServiceCreateSpecialServiceCatalogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IdRsp> {
    const response = await this.roomAdminServiceCreateSpecialServiceCatalogRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 房源删除
   */
  async roomAdminServiceDeleteRaw(
    requestParameters: RoomAdminServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/rooms/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源删除
   */
  async roomAdminServiceDelete(
    requestParameters: RoomAdminServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 房源爬虫删除
   */
  async roomAdminServiceDeleteRoomCrawlerRaw(
    requestParameters: RoomAdminServiceDeleteRoomCrawlerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceDeleteRoomCrawler.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/crawler/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源爬虫删除
   */
  async roomAdminServiceDeleteRoomCrawler(
    requestParameters: RoomAdminServiceDeleteRoomCrawlerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceDeleteRoomCrawlerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 特色服务删除
   */
  async roomAdminServiceDeleteSpecialServiceRaw(
    requestParameters: RoomAdminServiceDeleteSpecialServiceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceDeleteSpecialService.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/special_service/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 特色服务删除
   */
  async roomAdminServiceDeleteSpecialService(
    requestParameters: RoomAdminServiceDeleteSpecialServiceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceDeleteSpecialServiceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 删除特色服务分类
   */
  async roomAdminServiceDeleteSpecialServiceCatalogRaw(
    requestParameters: RoomAdminServiceDeleteSpecialServiceCatalogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceDeleteSpecialServiceCatalog.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/special_service_catalog/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 删除特色服务分类
   */
  async roomAdminServiceDeleteSpecialServiceCatalog(
    requestParameters: RoomAdminServiceDeleteSpecialServiceCatalogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceDeleteSpecialServiceCatalogRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async roomAdminServiceRollerAnnouncementDeleteRaw(
    requestParameters: RoomAdminServiceRollerAnnouncementDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceRollerAnnouncementDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/roller_announcement/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   */
  async roomAdminServiceRollerAnnouncementDelete(
    requestParameters: RoomAdminServiceRollerAnnouncementDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRollerAnnouncementDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 滚轮公告创建和修改
   */
  async roomAdminServiceRollerAnnouncementSaveRaw(
    requestParameters: RoomAdminServiceRollerAnnouncementSaveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceRollerAnnouncementSave.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/roller_announcement`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RollerAnnouncementListToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 滚轮公告创建和修改
   */
  async roomAdminServiceRollerAnnouncementSave(
    requestParameters: RoomAdminServiceRollerAnnouncementSaveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRollerAnnouncementSaveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 房源复制
   */
  async roomAdminServiceRoomCopyRaw(
    requestParameters: RoomAdminServiceRoomCopyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    if (requestParameters.language) {
      queryParameters['language'] = requestParameters.language;
    }

    if (requestParameters.roomId !== undefined) {
      queryParameters['roomId'] = requestParameters.roomId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/rooms/copy`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源复制
   */
  async roomAdminServiceRoomCopy(
    requestParameters: RoomAdminServiceRoomCopyRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRoomCopyRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 处理爬虫数据
   */
  async roomAdminServiceRoomCrawlerHandlerDataRaw(
    requestParameters: RoomAdminServiceRoomCrawlerHandlerDataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceRoomCrawlerHandlerData.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/crawler/{id}/handler`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 处理爬虫数据
   */
  async roomAdminServiceRoomCrawlerHandlerData(
    requestParameters: RoomAdminServiceRoomCrawlerHandlerDataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRoomCrawlerHandlerDataRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 房源爬虫列表
   */
  async roomAdminServiceRoomCrawlerListRaw(
    requestParameters: RoomAdminServiceRoomCrawlerListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RoomCrawlers>> {
    const queryParameters: any = {};

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    if (requestParameters.name !== undefined) {
      queryParameters['name'] = requestParameters.name;
    }

    if (requestParameters.status !== undefined) {
      queryParameters['status'] = requestParameters.status;
    }

    if (requestParameters.link !== undefined) {
      queryParameters['link'] = requestParameters.link;
    }

    if (requestParameters.roomId !== undefined) {
      queryParameters['roomId'] = requestParameters.roomId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/crawlers`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RoomCrawlersFromJSON(jsonValue));
  }

  /**
   * 房源爬虫列表
   */
  async roomAdminServiceRoomCrawlerList(
    requestParameters: RoomAdminServiceRoomCrawlerListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RoomCrawlers> {
    const response = await this.roomAdminServiceRoomCrawlerListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 房源爬虫重试
   */
  async roomAdminServiceRoomCrawlerRetryRaw(
    requestParameters: RoomAdminServiceRoomCrawlerRetryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceRoomCrawlerRetry.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/crawler/{id}/retry`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源爬虫重试
   */
  async roomAdminServiceRoomCrawlerRetry(
    requestParameters: RoomAdminServiceRoomCrawlerRetryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRoomCrawlerRetryRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 房源价格和日期策略删除
   */
  async roomAdminServiceRoomDeleteDatePriceRaw(
    requestParameters: RoomAdminServiceRoomDeleteDatePriceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceRoomDeleteDatePrice.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/room_date/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源价格和日期策略删除
   */
  async roomAdminServiceRoomDeleteDatePrice(
    requestParameters: RoomAdminServiceRoomDeleteDatePriceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRoomDeleteDatePriceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 房源设施批量创建
   */
  async roomAdminServiceRoomInfraBatchSaveRaw(
    requestParameters: RoomAdminServiceRoomInfraBatchSaveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceRoomInfraBatchSave.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/room_infras`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RoomInfraListToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源设施批量创建
   */
  async roomAdminServiceRoomInfraBatchSave(
    requestParameters: RoomAdminServiceRoomInfraBatchSaveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRoomInfraBatchSaveRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 房源设施分类更新
   */
  async roomAdminServiceRoomInfraCatalogUpdateRaw(
    requestParameters: RoomAdminServiceRoomInfraCatalogUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceRoomInfraCatalogUpdate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/room_infra_catalog`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: RoomInfraCatalogUpdateReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源设施分类更新
   */
  async roomAdminServiceRoomInfraCatalogUpdate(
    requestParameters: RoomAdminServiceRoomInfraCatalogUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRoomInfraCatalogUpdateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 房源设施删除
   */
  async roomAdminServiceRoomInfraDeleteRaw(
    requestParameters: RoomAdminServiceRoomInfraDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceRoomInfraDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/room_infra/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源设施删除
   */
  async roomAdminServiceRoomInfraDelete(
    requestParameters: RoomAdminServiceRoomInfraDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRoomInfraDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 房源设施查询
   */
  async roomAdminServiceRoomInfraFindRaw(
    requestParameters: RoomAdminServiceRoomInfraFindRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RoomInfras>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters['language'] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/room_infras`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RoomInfrasFromJSON(jsonValue));
  }

  /**
   * 房源设施查询
   */
  async roomAdminServiceRoomInfraFind(
    requestParameters: RoomAdminServiceRoomInfraFindRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RoomInfras> {
    const response = await this.roomAdminServiceRoomInfraFindRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 房源设施创建
   */
  async roomAdminServiceRoomInfraSaveRaw(
    requestParameters: RoomAdminServiceRoomInfraSaveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceRoomInfraSave.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/room_infra`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RoomInfraToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源设施创建
   */
  async roomAdminServiceRoomInfraSave(
    requestParameters: RoomAdminServiceRoomInfraSaveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRoomInfraSaveRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 房源价格和日期策略更新
   */
  async roomAdminServiceRoomUpdateDatePriceRaw(
    requestParameters: RoomAdminServiceRoomUpdateDatePriceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
      throw new runtime.RequiredError(
        'roomId',
        'Required parameter requestParameters.roomId was null or undefined when calling roomAdminServiceRoomUpdateDatePrice.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceRoomUpdateDatePrice.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/room_date/{roomId}`.replace(
          `{${'roomId'}}`,
          encodeURIComponent(String(requestParameters.roomId)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: RoomUpdateDatePriceBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源价格和日期策略更新
   */
  async roomAdminServiceRoomUpdateDatePrice(
    requestParameters: RoomAdminServiceRoomUpdateDatePriceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRoomUpdateDatePriceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 房源更新状态
   */
  async roomAdminServiceRoomUpdateStatusRaw(
    requestParameters: RoomAdminServiceRoomUpdateStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceRoomUpdateStatus.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceRoomUpdateStatus.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/room/{id}:status`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: RoomUpdateStatusBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源更新状态
   */
  async roomAdminServiceRoomUpdateStatus(
    requestParameters: RoomAdminServiceRoomUpdateStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceRoomUpdateStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 特殊服务复制
   */
  async roomAdminServiceServiceCopyRaw(
    requestParameters: RoomAdminServiceServiceCopyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceServiceCopy.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/special_services/copy`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ServiceCopyReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 特殊服务复制
   */
  async roomAdminServiceServiceCopy(
    requestParameters: RoomAdminServiceServiceCopyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceServiceCopyRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 房源置顶
   */
  async roomAdminServiceToppingRaw(
    requestParameters: RoomAdminServiceToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceTopping.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/room/{id}:to_top`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源置顶
   */
  async roomAdminServiceTopping(
    requestParameters: RoomAdminServiceToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceToppingRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 房源置顶取消
   */
  async roomAdminServiceUnToppingRaw(
    requestParameters: RoomAdminServiceUnToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceUnTopping.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/room/room/{id}:de_top`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源置顶取消
   */
  async roomAdminServiceUnTopping(
    requestParameters: RoomAdminServiceUnToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceUnToppingRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 房间信息更新
   */
  async roomAdminServiceUpdateRaw(
    requestParameters: RoomAdminServiceUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
      throw new runtime.RequiredError(
        'roomId',
        'Required parameter requestParameters.roomId was null or undefined when calling roomAdminServiceUpdate.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceUpdate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/rooms/{roomId}`.replace(
          `{${'roomId'}}`,
          encodeURIComponent(String(requestParameters.roomId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: RoomAdminServiceUpdateBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房间信息更新
   */
  async roomAdminServiceUpdate(
    requestParameters: RoomAdminServiceUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 房源价格更新
   */
  async roomAdminServiceUpdatePriceRaw(
    requestParameters: RoomAdminServiceUpdatePriceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
      throw new runtime.RequiredError(
        'roomId',
        'Required parameter requestParameters.roomId was null or undefined when calling roomAdminServiceUpdatePrice.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceUpdatePrice.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/rooms/{roomId}/price`.replace(
          `{${'roomId'}}`,
          encodeURIComponent(String(requestParameters.roomId)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UpdatePriceBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 房源价格更新
   */
  async roomAdminServiceUpdatePrice(
    requestParameters: RoomAdminServiceUpdatePriceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceUpdatePriceRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 特色服务更新
   */
  async roomAdminServiceUpdateSpecialServiceRaw(
    requestParameters: RoomAdminServiceUpdateSpecialServiceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceUpdateSpecialService.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceUpdateSpecialService.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/special_service/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateSpecialServiceBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 特色服务更新
   */
  async roomAdminServiceUpdateSpecialService(
    requestParameters: RoomAdminServiceUpdateSpecialServiceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceUpdateSpecialServiceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 更新特色服务分类
   */
  async roomAdminServiceUpdateSpecialServiceCatalogRaw(
    requestParameters: RoomAdminServiceUpdateSpecialServiceCatalogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling roomAdminServiceUpdateSpecialServiceCatalog.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling roomAdminServiceUpdateSpecialServiceCatalog.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/room/special_service_catalog/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateSpecialServiceCatalogBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 更新特色服务分类
   */
  async roomAdminServiceUpdateSpecialServiceCatalog(
    requestParameters: RoomAdminServiceUpdateSpecialServiceCatalogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.roomAdminServiceUpdateSpecialServiceCatalogRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const RoomAdminServiceRoomCopyLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type RoomAdminServiceRoomCopyLanguageEnum =
  (typeof RoomAdminServiceRoomCopyLanguageEnum)[keyof typeof RoomAdminServiceRoomCopyLanguageEnum];
/**
 * @export
 */
export const RoomAdminServiceRoomCrawlerListStatusEnum = {
  Pending: 'pending',
  Processing: 'processing',
  Success: 'success',
  Failed: 'failed',
} as const;
export type RoomAdminServiceRoomCrawlerListStatusEnum =
  (typeof RoomAdminServiceRoomCrawlerListStatusEnum)[keyof typeof RoomAdminServiceRoomCrawlerListStatusEnum];
/**
 * @export
 */
export const RoomAdminServiceRoomInfraFindLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type RoomAdminServiceRoomInfraFindLanguageEnum =
  (typeof RoomAdminServiceRoomInfraFindLanguageEnum)[keyof typeof RoomAdminServiceRoomInfraFindLanguageEnum];
