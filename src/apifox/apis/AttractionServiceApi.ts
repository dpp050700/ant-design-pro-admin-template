/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  Attraction,
  Attractions,
  Locations,
  Rooms,
  RpcStatus,
  V1ErrCode,
} from '../models/index';
import {
  AttractionFromJSON,
  AttractionToJSON,
  AttractionsFromJSON,
  AttractionsToJSON,
  LocationsFromJSON,
  LocationsToJSON,
  RoomsFromJSON,
  RoomsToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
} from '../models/index';

export interface AttractionServiceDetailRequest {
  id: string;
}

export interface AttractionServiceFindRequest {
  sortByUpdatedAt?: AttractionServiceFindSortByUpdatedAtEnum;
  sortByName?: AttractionServiceFindSortByNameEnum;
  sortByCountry?: AttractionServiceFindSortByCountryEnum;
  sortByCity?: AttractionServiceFindSortByCityEnum;
  sortByLanguage?: AttractionServiceFindSortByLanguageEnum;
  sortByIsTopped?: AttractionServiceFindSortByIsToppedEnum;
  sortByNearbyRoomCount?: AttractionServiceFindSortByNearbyRoomCountEnum;
  pageLimit?: number;
  pageOffset?: number;
  city?: string;
  country?: string;
  name?: string;
  language?: AttractionServiceFindLanguageEnum;
  status?: AttractionServiceFindStatusEnum;
  hasNearbyRoom?: boolean;
  kind?: AttractionServiceFindKindEnum;
}

export interface AttractionServiceNearbyAttractionsRequest {
  locationLatitude: number;
  locationLongitude: number;
  distance?: number;
  language?: AttractionServiceNearbyAttractionsLanguageEnum;
}

export interface AttractionServiceNearbyRoomsRequest {
  id: string;
  pageLimit?: number;
  pageOffset?: number;
  language?: AttractionServiceNearbyRoomsLanguageEnum;
}

export interface AttractionServiceSearchPopularRequest {
  sortBy?: string;
  pageLimit?: number;
  pageOffset?: number;
  search?: string;
  language?: AttractionServiceSearchPopularLanguageEnum;
}

/**
 *
 */
export class AttractionServiceApi extends runtime.BaseAPI {
  /**
   * 查询景点详情
   */
  async attractionServiceDetailRaw(
    requestParameters: AttractionServiceDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Attraction>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling attractionServiceDetail.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/attraction/attraction/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AttractionFromJSON(jsonValue));
  }

  /**
   * 查询景点详情
   */
  async attractionServiceDetail(
    requestParameters: AttractionServiceDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Attraction> {
    const response = await this.attractionServiceDetailRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 查询景点列表
   */
  async attractionServiceFindRaw(
    requestParameters: AttractionServiceFindRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Attractions>> {
    const queryParameters: any = {};

    if (requestParameters.sortByUpdatedAt !== undefined) {
      queryParameters['sortBy.updatedAt'] = requestParameters.sortByUpdatedAt;
    }

    if (requestParameters.sortByName !== undefined) {
      queryParameters['sortBy.name'] = requestParameters.sortByName;
    }

    if (requestParameters.sortByCountry !== undefined) {
      queryParameters['sortBy.country'] = requestParameters.sortByCountry;
    }

    if (requestParameters.sortByCity !== undefined) {
      queryParameters['sortBy.city'] = requestParameters.sortByCity;
    }

    if (requestParameters.sortByLanguage !== undefined) {
      queryParameters['sortBy.language'] = requestParameters.sortByLanguage;
    }

    if (requestParameters.sortByIsTopped !== undefined) {
      queryParameters['sortBy.isTopped'] = requestParameters.sortByIsTopped;
    }

    if (requestParameters.sortByNearbyRoomCount !== undefined) {
      queryParameters['sortBy.nearbyRoomCount'] = requestParameters.sortByNearbyRoomCount;
    }

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    if (requestParameters.city !== undefined) {
      queryParameters['city'] = requestParameters.city;
    }

    if (requestParameters.country !== undefined) {
      queryParameters['country'] = requestParameters.country;
    }

    if (requestParameters.name !== undefined) {
      queryParameters['name'] = requestParameters.name;
    }

    if (requestParameters.language !== undefined) {
      queryParameters['language'] = requestParameters.language;
    }

    if (requestParameters.status !== undefined) {
      queryParameters['status'] = requestParameters.status;
    }

    if (requestParameters.hasNearbyRoom !== undefined) {
      queryParameters['hasNearbyRoom'] = requestParameters.hasNearbyRoom;
    }

    if (requestParameters.kind !== undefined) {
      queryParameters['kind'] = requestParameters.kind;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/attraction/attractions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AttractionsFromJSON(jsonValue));
  }

  /**
   * 查询景点列表
   */
  async attractionServiceFind(
    requestParameters: AttractionServiceFindRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Attractions> {
    const response = await this.attractionServiceFindRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 查询目的地城市
   */
  async attractionServiceFindCityRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Locations>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/attraction/locations`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => LocationsFromJSON(jsonValue));
  }

  /**
   * 查询目的地城市
   */
  async attractionServiceFindCity(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Locations> {
    const response = await this.attractionServiceFindCityRaw(initOverrides);
    return await response.value();
  }

  /**
   * 附近景点
   */
  async attractionServiceNearbyAttractionsRaw(
    requestParameters: AttractionServiceNearbyAttractionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Attractions>> {
    if (
      requestParameters.locationLatitude === null ||
      requestParameters.locationLatitude === undefined
    ) {
      throw new runtime.RequiredError(
        'locationLatitude',
        'Required parameter requestParameters.locationLatitude was null or undefined when calling attractionServiceNearbyAttractions.',
      );
    }

    if (
      requestParameters.locationLongitude === null ||
      requestParameters.locationLongitude === undefined
    ) {
      throw new runtime.RequiredError(
        'locationLongitude',
        'Required parameter requestParameters.locationLongitude was null or undefined when calling attractionServiceNearbyAttractions.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.locationLatitude !== undefined) {
      queryParameters['location.latitude'] = requestParameters.locationLatitude;
    }

    if (requestParameters.locationLongitude !== undefined) {
      queryParameters['location.longitude'] = requestParameters.locationLongitude;
    }

    if (requestParameters.distance !== undefined) {
      queryParameters['distance'] = requestParameters.distance;
    }

    if (requestParameters.language !== undefined) {
      queryParameters['language'] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/attraction/nearby_attractions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AttractionsFromJSON(jsonValue));
  }

  /**
   * 附近景点
   */
  async attractionServiceNearbyAttractions(
    requestParameters: AttractionServiceNearbyAttractionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Attractions> {
    const response = await this.attractionServiceNearbyAttractionsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 附近房源
   */
  async attractionServiceNearbyRoomsRaw(
    requestParameters: AttractionServiceNearbyRoomsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Rooms>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling attractionServiceNearbyRooms.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    if (requestParameters.language !== undefined) {
      queryParameters['language'] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/attraction/attraction/{id}/nearby_rooms`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RoomsFromJSON(jsonValue));
  }

  /**
   * 附近房源
   */
  async attractionServiceNearbyRooms(
    requestParameters: AttractionServiceNearbyRoomsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Rooms> {
    const response = await this.attractionServiceNearbyRoomsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 热门地区搜索
   */
  async attractionServiceSearchPopularRaw(
    requestParameters: AttractionServiceSearchPopularRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Attractions>> {
    const queryParameters: any = {};

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sortBy'] = requestParameters.sortBy;
    }

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    if (requestParameters.search !== undefined) {
      queryParameters['search'] = requestParameters.search;
    }

    if (requestParameters.language !== undefined) {
      queryParameters['language'] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/attraction/popular_attraction`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AttractionsFromJSON(jsonValue));
  }

  /**
   * 热门地区搜索
   */
  async attractionServiceSearchPopular(
    requestParameters: AttractionServiceSearchPopularRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Attractions> {
    const response = await this.attractionServiceSearchPopularRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const AttractionServiceFindSortByUpdatedAtEnum = {
  Ascend: 'ascend',
  Descend: 'descend',
} as const;
export type AttractionServiceFindSortByUpdatedAtEnum =
  (typeof AttractionServiceFindSortByUpdatedAtEnum)[keyof typeof AttractionServiceFindSortByUpdatedAtEnum];
/**
 * @export
 */
export const AttractionServiceFindSortByNameEnum = {
  Ascend: 'ascend',
  Descend: 'descend',
} as const;
export type AttractionServiceFindSortByNameEnum =
  (typeof AttractionServiceFindSortByNameEnum)[keyof typeof AttractionServiceFindSortByNameEnum];
/**
 * @export
 */
export const AttractionServiceFindSortByCountryEnum = {
  Ascend: 'ascend',
  Descend: 'descend',
} as const;
export type AttractionServiceFindSortByCountryEnum =
  (typeof AttractionServiceFindSortByCountryEnum)[keyof typeof AttractionServiceFindSortByCountryEnum];
/**
 * @export
 */
export const AttractionServiceFindSortByCityEnum = {
  Ascend: 'ascend',
  Descend: 'descend',
} as const;
export type AttractionServiceFindSortByCityEnum =
  (typeof AttractionServiceFindSortByCityEnum)[keyof typeof AttractionServiceFindSortByCityEnum];
/**
 * @export
 */
export const AttractionServiceFindSortByLanguageEnum = {
  Ascend: 'ascend',
  Descend: 'descend',
} as const;
export type AttractionServiceFindSortByLanguageEnum =
  (typeof AttractionServiceFindSortByLanguageEnum)[keyof typeof AttractionServiceFindSortByLanguageEnum];
/**
 * @export
 */
export const AttractionServiceFindSortByIsToppedEnum = {
  Ascend: 'ascend',
  Descend: 'descend',
} as const;
export type AttractionServiceFindSortByIsToppedEnum =
  (typeof AttractionServiceFindSortByIsToppedEnum)[keyof typeof AttractionServiceFindSortByIsToppedEnum];
/**
 * @export
 */
export const AttractionServiceFindSortByNearbyRoomCountEnum = {
  Ascend: 'ascend',
  Descend: 'descend',
} as const;
export type AttractionServiceFindSortByNearbyRoomCountEnum =
  (typeof AttractionServiceFindSortByNearbyRoomCountEnum)[keyof typeof AttractionServiceFindSortByNearbyRoomCountEnum];
/**
 * @export
 */
export const AttractionServiceFindLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type AttractionServiceFindLanguageEnum =
  (typeof AttractionServiceFindLanguageEnum)[keyof typeof AttractionServiceFindLanguageEnum];
/**
 * @export
 */
export const AttractionServiceFindStatusEnum = {
  Draft: 'draft',
  Published: 'published',
} as const;
export type AttractionServiceFindStatusEnum =
  (typeof AttractionServiceFindStatusEnum)[keyof typeof AttractionServiceFindStatusEnum];
/**
 * @export
 */
export const AttractionServiceFindKindEnum = {
  CommunityKind: 'community_kind',
  TourismStrategyKind: 'tourism_strategy_kind',
} as const;
export type AttractionServiceFindKindEnum =
  (typeof AttractionServiceFindKindEnum)[keyof typeof AttractionServiceFindKindEnum];
/**
 * @export
 */
export const AttractionServiceNearbyAttractionsLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type AttractionServiceNearbyAttractionsLanguageEnum =
  (typeof AttractionServiceNearbyAttractionsLanguageEnum)[keyof typeof AttractionServiceNearbyAttractionsLanguageEnum];
/**
 * @export
 */
export const AttractionServiceNearbyRoomsLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type AttractionServiceNearbyRoomsLanguageEnum =
  (typeof AttractionServiceNearbyRoomsLanguageEnum)[keyof typeof AttractionServiceNearbyRoomsLanguageEnum];
/**
 * @export
 */
export const AttractionServiceSearchPopularLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type AttractionServiceSearchPopularLanguageEnum =
  (typeof AttractionServiceSearchPopularLanguageEnum)[keyof typeof AttractionServiceSearchPopularLanguageEnum];
