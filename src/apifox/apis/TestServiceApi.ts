/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ErrCodeRsp,
  Hello,
  HttpBody,
  Message,
  RpcStatus,
  StreamResultOfHello,
  V1ErrCode,
} from '../models/index';
import {
  ErrCodeRspFromJSON,
  ErrCodeRspToJSON,
  HelloFromJSON,
  HelloToJSON,
  HttpBodyFromJSON,
  HttpBodyToJSON,
  MessageFromJSON,
  MessageToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON,
  StreamResultOfHelloFromJSON,
  StreamResultOfHelloToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
} from '../models/index';

export interface TestServiceBulkCreateRequest {
  body: Hello;
}

export interface TestServiceBulkEchoRequest {
  body: Hello;
}

export interface TestServiceDownload1Request {
  key: string;
}

export interface TestServiceFileRequest {
  contentType?: string;
  data?: string;
}

export interface TestServiceGetMessageTwoRequest {
  messageId: string;
  revision?: string;
  subSubfield?: string;
  userId?: string;
}

export interface TestServiceGetMessageTwo2Request {
  userId: string;
  messageId?: string;
  revision?: string;
  subSubfield?: string;
}

export interface TestServiceGetMessageTwo3Request {
  userId: string;
  messageId: string;
  revision?: string;
  subSubfield?: string;
}

export interface TestServiceLargeUploadDownloadRequest {
  file: HttpBody;
  filename?: string;
}

export interface TestServiceListRequest {
  hello?: string;
  helloRsp?: string;
  now?: string;
}

export interface TestServiceUploadDownloadRequest {
  filename: string;
  file: HttpBody;
}

/**
 *
 */
export class TestServiceApi extends runtime.BaseAPI {
  /**
   */
  async testServiceBulkCreateRaw(
    requestParameters: TestServiceBulkCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling testServiceBulkCreate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/test/bulk`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: HelloToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   */
  async testServiceBulkCreate(
    requestParameters: TestServiceBulkCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.testServiceBulkCreateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async testServiceBulkEchoRaw(
    requestParameters: TestServiceBulkEchoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StreamResultOfHello>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling testServiceBulkEcho.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/test/test-streams`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: HelloToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StreamResultOfHelloFromJSON(jsonValue),
    );
  }

  /**
   */
  async testServiceBulkEcho(
    requestParameters: TestServiceBulkEchoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StreamResultOfHello> {
    const response = await this.testServiceBulkEchoRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async testServiceDownloadRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Blob>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/test/test/download`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.BlobApiResponse(response);
  }

  /**
   */
  async testServiceDownload(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Blob> {
    const response = await this.testServiceDownloadRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async testServiceDownload1Raw(
    requestParameters: TestServiceDownload1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.key === null || requestParameters.key === undefined) {
      throw new runtime.RequiredError(
        'key',
        'Required parameter requestParameters.key was null or undefined when calling testServiceDownload1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/test/test/download/{key}`.replace(
          `{${'key'}}`,
          encodeURIComponent(String(requestParameters.key)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   */
  async testServiceDownload1(
    requestParameters: TestServiceDownload1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.testServiceDownload1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 错误码
   */
  async testServiceErrCodesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ErrCodeRsp>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/err_codes`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ErrCodeRspFromJSON(jsonValue));
  }

  /**
   * 错误码
   */
  async testServiceErrCodes(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ErrCodeRsp> {
    const response = await this.testServiceErrCodesRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async testServiceFileRaw(
    requestParameters: TestServiceFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<HttpBody>> {
    const queryParameters: any = {};

    if (requestParameters.contentType !== undefined) {
      queryParameters['contentType'] = requestParameters.contentType;
    }

    if (requestParameters.data !== undefined) {
      queryParameters['data'] = requestParameters.data;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/test/s3/object`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => HttpBodyFromJSON(jsonValue));
  }

  /**
   */
  async testServiceFile(
    requestParameters: TestServiceFileRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<HttpBody> {
    const response = await this.testServiceFileRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async testServiceGetMessageTwoRaw(
    requestParameters: TestServiceGetMessageTwoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Message>> {
    if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
      throw new runtime.RequiredError(
        'messageId',
        'Required parameter requestParameters.messageId was null or undefined when calling testServiceGetMessageTwo.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.revision !== undefined) {
      queryParameters['revision'] = requestParameters.revision;
    }

    if (requestParameters.subSubfield !== undefined) {
      queryParameters['sub.subfield'] = requestParameters.subSubfield;
    }

    if (requestParameters.userId !== undefined) {
      queryParameters['userId'] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/messages/{messageId}`.replace(
          `{${'messageId'}}`,
          encodeURIComponent(String(requestParameters.messageId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
  }

  /**
   */
  async testServiceGetMessageTwo(
    requestParameters: TestServiceGetMessageTwoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Message> {
    const response = await this.testServiceGetMessageTwoRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async testServiceGetMessageTwo2Raw(
    requestParameters: TestServiceGetMessageTwo2Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Message>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling testServiceGetMessageTwo2.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.messageId !== undefined) {
      queryParameters['messageId'] = requestParameters.messageId;
    }

    if (requestParameters.revision !== undefined) {
      queryParameters['revision'] = requestParameters.revision;
    }

    if (requestParameters.subSubfield !== undefined) {
      queryParameters['sub.subfield'] = requestParameters.subSubfield;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/users/{userId}/messages`.replace(
          `{${'userId'}}`,
          encodeURIComponent(String(requestParameters.userId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
  }

  /**
   */
  async testServiceGetMessageTwo2(
    requestParameters: TestServiceGetMessageTwo2Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Message> {
    const response = await this.testServiceGetMessageTwo2Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async testServiceGetMessageTwo3Raw(
    requestParameters: TestServiceGetMessageTwo3Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Message>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling testServiceGetMessageTwo3.',
      );
    }

    if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
      throw new runtime.RequiredError(
        'messageId',
        'Required parameter requestParameters.messageId was null or undefined when calling testServiceGetMessageTwo3.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.revision !== undefined) {
      queryParameters['revision'] = requestParameters.revision;
    }

    if (requestParameters.subSubfield !== undefined) {
      queryParameters['sub.subfield'] = requestParameters.subSubfield;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/users/{userId}/messages/{messageId}`
          .replace(`{${'userId'}}`, encodeURIComponent(String(requestParameters.userId)))
          .replace(`{${'messageId'}}`, encodeURIComponent(String(requestParameters.messageId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
  }

  /**
   */
  async testServiceGetMessageTwo3(
    requestParameters: TestServiceGetMessageTwo3Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Message> {
    const response = await this.testServiceGetMessageTwo3Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async testServiceLargeUploadDownloadRaw(
    requestParameters: TestServiceLargeUploadDownloadRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Blob>> {
    if (requestParameters.file === null || requestParameters.file === undefined) {
      throw new runtime.RequiredError(
        'file',
        'Required parameter requestParameters.file was null or undefined when calling testServiceLargeUploadDownload.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.filename !== undefined) {
      queryParameters['filename'] = requestParameters.filename;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/files/large/filename`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: HttpBodyToJSON(requestParameters.file),
      },
      initOverrides,
    );

    return new runtime.BlobApiResponse(response);
  }

  /**
   */
  async testServiceLargeUploadDownload(
    requestParameters: TestServiceLargeUploadDownloadRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Blob> {
    const response = await this.testServiceLargeUploadDownloadRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async testServiceListRaw(
    requestParameters: TestServiceListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StreamResultOfHello>> {
    const queryParameters: any = {};

    if (requestParameters.hello !== undefined) {
      queryParameters['hello'] = requestParameters.hello;
    }

    if (requestParameters.helloRsp !== undefined) {
      queryParameters['helloRsp'] = requestParameters.helloRsp;
    }

    if (requestParameters.now !== undefined) {
      queryParameters['now'] = requestParameters.now;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/test/tests`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StreamResultOfHelloFromJSON(jsonValue),
    );
  }

  /**
   */
  async testServiceList(
    requestParameters: TestServiceListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StreamResultOfHello> {
    const response = await this.testServiceListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async testServiceTestRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<V1ErrCode>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/test/test`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => V1ErrCodeFromJSON(jsonValue));
  }

  /**
   */
  async testServiceTest(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<V1ErrCode> {
    const response = await this.testServiceTestRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async testServiceUploadDownloadRaw(
    requestParameters: TestServiceUploadDownloadRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<HttpBody>> {
    if (requestParameters.filename === null || requestParameters.filename === undefined) {
      throw new runtime.RequiredError(
        'filename',
        'Required parameter requestParameters.filename was null or undefined when calling testServiceUploadDownload.',
      );
    }

    if (requestParameters.file === null || requestParameters.file === undefined) {
      throw new runtime.RequiredError(
        'file',
        'Required parameter requestParameters.file was null or undefined when calling testServiceUploadDownload.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/files/{filename}`.replace(
          `{${'filename'}}`,
          encodeURIComponent(String(requestParameters.filename)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: HttpBodyToJSON(requestParameters.file),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => HttpBodyFromJSON(jsonValue));
  }

  /**
   */
  async testServiceUploadDownload(
    requestParameters: TestServiceUploadDownloadRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<HttpBody> {
    const response = await this.testServiceUploadDownloadRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
