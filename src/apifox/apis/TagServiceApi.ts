/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  RpcStatus,
  TagCreateReq,
  TagServiceUpdateBody,
  Tags,
  V1ErrCode,
} from '../models/index';
import {
  RpcStatusFromJSON,
  RpcStatusToJSON,
  TagCreateReqFromJSON,
  TagCreateReqToJSON,
  TagServiceUpdateBodyFromJSON,
  TagServiceUpdateBodyToJSON,
  TagsFromJSON,
  TagsToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
} from '../models/index';

export interface TagServiceCreateRequest {
  body: TagCreateReq;
}

export interface TagServiceDeleteRequest {
  id: string;
}

export interface TagServiceListRequest {
  name?: string;
  pageLimit?: number;
  pageOffset?: number;
  language?: TagServiceListLanguageEnum;
  kind?: TagServiceListKindEnum;
}

export interface TagServiceUpdateRequest {
  id: string;
  body: TagServiceUpdateBody;
}

/**
 *
 */
export class TagServiceApi extends runtime.BaseAPI {
  /**
   */
  async tagServiceCreateRaw(
    requestParameters: TagServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling tagServiceCreate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/tag/tags`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: TagCreateReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   */
  async tagServiceCreate(
    requestParameters: TagServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.tagServiceCreateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async tagServiceDeleteRaw(
    requestParameters: TagServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling tagServiceDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tag/tag/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   */
  async tagServiceDelete(
    requestParameters: TagServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.tagServiceDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async tagServiceListRaw(
    requestParameters: TagServiceListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Tags>> {
    const queryParameters: any = {};

    if (requestParameters.name !== undefined) {
      queryParameters['name'] = requestParameters.name;
    }

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    if (requestParameters.language !== undefined) {
      queryParameters['language'] = requestParameters.language;
    }

    if (requestParameters.kind !== undefined) {
      queryParameters['kind'] = requestParameters.kind;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tag/tags`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TagsFromJSON(jsonValue));
  }

  /**
   */
  async tagServiceList(
    requestParameters: TagServiceListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Tags> {
    const response = await this.tagServiceListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async tagServiceUpdateRaw(
    requestParameters: TagServiceUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling tagServiceUpdate.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling tagServiceUpdate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/tag/tags/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: TagServiceUpdateBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   */
  async tagServiceUpdate(
    requestParameters: TagServiceUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.tagServiceUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const TagServiceListLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type TagServiceListLanguageEnum =
  (typeof TagServiceListLanguageEnum)[keyof typeof TagServiceListLanguageEnum];
/**
 * @export
 */
export const TagServiceListKindEnum = {
  Attr: 'attr',
  Func: 'func',
  Desc: 'desc',
} as const;
export type TagServiceListKindEnum =
  (typeof TagServiceListKindEnum)[keyof typeof TagServiceListKindEnum];
