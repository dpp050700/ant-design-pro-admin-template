/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { Banner, Banners, RpcStatus, SaveBody, V1ErrCode } from '../models/index';
import {
  BannerFromJSON,
  BannerToJSON,
  BannersFromJSON,
  BannersToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON,
  SaveBodyFromJSON,
  SaveBodyToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
} from '../models/index';

export interface BannerServiceDetailRequest {
  type: BannerServiceDetailTypeEnum;
  language?: BannerServiceDetailLanguageEnum;
}

export interface BannerServiceFindRequest {
  language?: BannerServiceFindLanguageEnum;
}

export interface BannerServiceSaveRequest {
  bannerType: BannerServiceSaveBannerTypeEnum;
  body: SaveBody;
}

/**
 *
 */
export class BannerServiceApi extends runtime.BaseAPI {
  /**
   */
  async bannerServiceDetailRaw(
    requestParameters: BannerServiceDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Banner>> {
    if (requestParameters.type === null || requestParameters.type === undefined) {
      throw new runtime.RequiredError(
        'type',
        'Required parameter requestParameters.type was null or undefined when calling bannerServiceDetail.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters['language'] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/banner/banner/{type}`.replace(
          `{${'type'}}`,
          encodeURIComponent(String(requestParameters.type)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => BannerFromJSON(jsonValue));
  }

  /**
   */
  async bannerServiceDetail(
    requestParameters: BannerServiceDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Banner> {
    const response = await this.bannerServiceDetailRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async bannerServiceFindRaw(
    requestParameters: BannerServiceFindRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Banners>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters['language'] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/banner/banners`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => BannersFromJSON(jsonValue));
  }

  /**
   */
  async bannerServiceFind(
    requestParameters: BannerServiceFindRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Banners> {
    const response = await this.bannerServiceFindRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async bannerServiceSaveRaw(
    requestParameters: BannerServiceSaveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.bannerType === null || requestParameters.bannerType === undefined) {
      throw new runtime.RequiredError(
        'bannerType',
        'Required parameter requestParameters.bannerType was null or undefined when calling bannerServiceSave.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling bannerServiceSave.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/banner/banner/{banner.type}`.replace(
          `{${'banner.type'}}`,
          encodeURIComponent(String(requestParameters.bannerType)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SaveBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   */
  async bannerServiceSave(
    requestParameters: BannerServiceSaveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.bannerServiceSaveRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const BannerServiceDetailTypeEnum = {
  Home: 'type_home',
  Order: 'type_order',
  StoreInfo: 'type_store_info',
  PointsInfo: 'type_points_info',
} as const;
export type BannerServiceDetailTypeEnum =
  (typeof BannerServiceDetailTypeEnum)[keyof typeof BannerServiceDetailTypeEnum];
/**
 * @export
 */
export const BannerServiceDetailLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type BannerServiceDetailLanguageEnum =
  (typeof BannerServiceDetailLanguageEnum)[keyof typeof BannerServiceDetailLanguageEnum];
/**
 * @export
 */
export const BannerServiceFindLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type BannerServiceFindLanguageEnum =
  (typeof BannerServiceFindLanguageEnum)[keyof typeof BannerServiceFindLanguageEnum];
/**
 * @export
 */
export const BannerServiceSaveBannerTypeEnum = {
  Home: 'type_home',
  Order: 'type_order',
  StoreInfo: 'type_store_info',
  PointsInfo: 'type_points_info',
} as const;
export type BannerServiceSaveBannerTypeEnum =
  (typeof BannerServiceSaveBannerTypeEnum)[keyof typeof BannerServiceSaveBannerTypeEnum];
