/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateExchangeRecordReq,
  IdRsp,
  RedeemRaffleGoodBody,
  RpcStatus,
  V1ErrCode,
  VirtualGood,
  VirtualGoodExchangeRecords,
  VirtualGoodOrder,
  VirtualGoodRaffle,
  VirtualGoodRaffleRecord,
  VirtualGoodRaffleRecords,
  VirtualGoods,
} from '../models/index';
import {
  CreateExchangeRecordReqFromJSON,
  CreateExchangeRecordReqToJSON,
  IdRspFromJSON,
  IdRspToJSON,
  RedeemRaffleGoodBodyFromJSON,
  RedeemRaffleGoodBodyToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
  VirtualGoodFromJSON,
  VirtualGoodToJSON,
  VirtualGoodExchangeRecordsFromJSON,
  VirtualGoodExchangeRecordsToJSON,
  VirtualGoodOrderFromJSON,
  VirtualGoodOrderToJSON,
  VirtualGoodRaffleFromJSON,
  VirtualGoodRaffleToJSON,
  VirtualGoodRaffleRecordFromJSON,
  VirtualGoodRaffleRecordToJSON,
  VirtualGoodRaffleRecordsFromJSON,
  VirtualGoodRaffleRecordsToJSON,
  VirtualGoodsFromJSON,
  VirtualGoodsToJSON,
} from '../models/index';

export interface VirtualGoodServiceFindMyExchangeRecordRequest {
  pageLimit?: number;
  pageOffset?: number;
}

export interface VirtualGoodServiceFindMyRaffleGoodsRequest {
  pageLimit?: number;
  pageOffset?: number;
}

export interface VirtualGoodServiceFindMyRaffleRecordRequest {
  pageLimit?: number;
  pageOffset?: number;
}

export interface VirtualGoodServiceFindVirtualGoodRequest {
  name?: string;
  language?: VirtualGoodServiceFindVirtualGoodLanguageEnum;
  kind?: VirtualGoodServiceFindVirtualGoodKindEnum;
  type?: VirtualGoodServiceFindVirtualGoodTypeEnum;
  pageLimit?: number;
  pageOffset?: number;
}

export interface VirtualGoodServiceGetExchangeRecordDetailRequest {
  id: string;
}

export interface VirtualGoodServiceGetRaffleGoodDetailRequest {
  id: string;
}

export interface VirtualGoodServiceGetVirtualGoodRequest {
  id: string;
}

export interface VirtualGoodServiceRaffleRequest {
  body: object;
}

export interface VirtualGoodServiceRedeemExchangeGoodRequest {
  body: CreateExchangeRecordReq;
}

export interface VirtualGoodServiceRedeemRaffleGoodRequest {
  orderId: string;
  body: RedeemRaffleGoodBody;
}

/**
 *
 */
export class VirtualGoodServiceApi extends runtime.BaseAPI {
  /**
   * 查询我兑换的商品
   */
  async virtualGoodServiceFindMyExchangeRecordRaw(
    requestParameters: VirtualGoodServiceFindMyExchangeRecordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VirtualGoodExchangeRecords>> {
    const queryParameters: any = {};

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/virtual_good/my_exchange_records`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VirtualGoodExchangeRecordsFromJSON(jsonValue),
    );
  }

  /**
   * 查询我兑换的商品
   */
  async virtualGoodServiceFindMyExchangeRecord(
    requestParameters: VirtualGoodServiceFindMyExchangeRecordRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VirtualGoodExchangeRecords> {
    const response = await this.virtualGoodServiceFindMyExchangeRecordRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 查询我的抽奖中奖商品
   */
  async virtualGoodServiceFindMyRaffleGoodsRaw(
    requestParameters: VirtualGoodServiceFindMyRaffleGoodsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VirtualGoodRaffleRecords>> {
    const queryParameters: any = {};

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/virtual_good/raffle_goods`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VirtualGoodRaffleRecordsFromJSON(jsonValue),
    );
  }

  /**
   * 查询我的抽奖中奖商品
   */
  async virtualGoodServiceFindMyRaffleGoods(
    requestParameters: VirtualGoodServiceFindMyRaffleGoodsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VirtualGoodRaffleRecords> {
    const response = await this.virtualGoodServiceFindMyRaffleGoodsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 查询我的抽奖记录
   */
  async virtualGoodServiceFindMyRaffleRecordRaw(
    requestParameters: VirtualGoodServiceFindMyRaffleRecordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VirtualGoodRaffleRecords>> {
    const queryParameters: any = {};

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/virtual_good/raffle_records`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VirtualGoodRaffleRecordsFromJSON(jsonValue),
    );
  }

  /**
   * 查询我的抽奖记录
   */
  async virtualGoodServiceFindMyRaffleRecord(
    requestParameters: VirtualGoodServiceFindMyRaffleRecordRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VirtualGoodRaffleRecords> {
    const response = await this.virtualGoodServiceFindMyRaffleRecordRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 查询商品列表
   */
  async virtualGoodServiceFindVirtualGoodRaw(
    requestParameters: VirtualGoodServiceFindVirtualGoodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VirtualGoods>> {
    const queryParameters: any = {};

    if (requestParameters.name !== undefined) {
      queryParameters['name'] = requestParameters.name;
    }

    if (requestParameters.language !== undefined) {
      queryParameters['language'] = requestParameters.language;
    }

    if (requestParameters.kind !== undefined) {
      queryParameters['kind'] = requestParameters.kind;
    }

    if (requestParameters.type !== undefined) {
      queryParameters['type'] = requestParameters.type;
    }

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/virtual_good/virtual_goods`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => VirtualGoodsFromJSON(jsonValue));
  }

  /**
   * 查询商品列表
   */
  async virtualGoodServiceFindVirtualGood(
    requestParameters: VirtualGoodServiceFindVirtualGoodRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VirtualGoods> {
    const response = await this.virtualGoodServiceFindVirtualGoodRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 查询我兑换的商品详情
   */
  async virtualGoodServiceGetExchangeRecordDetailRaw(
    requestParameters: VirtualGoodServiceGetExchangeRecordDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VirtualGoodOrder>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling virtualGoodServiceGetExchangeRecordDetail.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/virtual_good/my_exchange_records/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VirtualGoodOrderFromJSON(jsonValue),
    );
  }

  /**
   * 查询我兑换的商品详情
   */
  async virtualGoodServiceGetExchangeRecordDetail(
    requestParameters: VirtualGoodServiceGetExchangeRecordDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VirtualGoodOrder> {
    const response = await this.virtualGoodServiceGetExchangeRecordDetailRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 查询抽奖详情
   */
  async virtualGoodServiceGetRaffleRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VirtualGoodRaffle>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/virtual_good/raffle`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VirtualGoodRaffleFromJSON(jsonValue),
    );
  }

  /**
   * 查询抽奖详情
   */
  async virtualGoodServiceGetRaffle(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VirtualGoodRaffle> {
    const response = await this.virtualGoodServiceGetRaffleRaw(initOverrides);
    return await response.value();
  }

  /**
   * 查询我的抽奖中奖商品详情
   */
  async virtualGoodServiceGetRaffleGoodDetailRaw(
    requestParameters: VirtualGoodServiceGetRaffleGoodDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VirtualGoodRaffleRecord>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling virtualGoodServiceGetRaffleGoodDetail.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/virtual_good/raffle_goods/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VirtualGoodRaffleRecordFromJSON(jsonValue),
    );
  }

  /**
   * 查询我的抽奖中奖商品详情
   */
  async virtualGoodServiceGetRaffleGoodDetail(
    requestParameters: VirtualGoodServiceGetRaffleGoodDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VirtualGoodRaffleRecord> {
    const response = await this.virtualGoodServiceGetRaffleGoodDetailRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 查询虚拟商品详情
   */
  async virtualGoodServiceGetVirtualGoodRaw(
    requestParameters: VirtualGoodServiceGetVirtualGoodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VirtualGood>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling virtualGoodServiceGetVirtualGood.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/virtual_good/virtual_good/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => VirtualGoodFromJSON(jsonValue));
  }

  /**
   * 查询虚拟商品详情
   */
  async virtualGoodServiceGetVirtualGood(
    requestParameters: VirtualGoodServiceGetVirtualGoodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VirtualGood> {
    const response = await this.virtualGoodServiceGetVirtualGoodRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 抽奖
   */
  async virtualGoodServiceRaffleRaw(
    requestParameters: VirtualGoodServiceRaffleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VirtualGoodRaffleRecord>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling virtualGoodServiceRaffle.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/virtual_good/do_raffle`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VirtualGoodRaffleRecordFromJSON(jsonValue),
    );
  }

  /**
   * 抽奖
   */
  async virtualGoodServiceRaffle(
    requestParameters: VirtualGoodServiceRaffleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VirtualGoodRaffleRecord> {
    const response = await this.virtualGoodServiceRaffleRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 兑换商城商品
   */
  async virtualGoodServiceRedeemExchangeGoodRaw(
    requestParameters: VirtualGoodServiceRedeemExchangeGoodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IdRsp>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling virtualGoodServiceRedeemExchangeGood.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/virtual_good/exchange_records`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateExchangeRecordReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdRspFromJSON(jsonValue));
  }

  /**
   * 兑换商城商品
   */
  async virtualGoodServiceRedeemExchangeGood(
    requestParameters: VirtualGoodServiceRedeemExchangeGoodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IdRsp> {
    const response = await this.virtualGoodServiceRedeemExchangeGoodRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 兑换抽奖商品
   */
  async virtualGoodServiceRedeemRaffleGoodRaw(
    requestParameters: VirtualGoodServiceRedeemRaffleGoodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
      throw new runtime.RequiredError(
        'orderId',
        'Required parameter requestParameters.orderId was null or undefined when calling virtualGoodServiceRedeemRaffleGood.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling virtualGoodServiceRedeemRaffleGood.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/virtual_good/raffle_goods/{orderId}`.replace(
          `{${'orderId'}}`,
          encodeURIComponent(String(requestParameters.orderId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: RedeemRaffleGoodBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 兑换抽奖商品
   */
  async virtualGoodServiceRedeemRaffleGood(
    requestParameters: VirtualGoodServiceRedeemRaffleGoodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.virtualGoodServiceRedeemRaffleGoodRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const VirtualGoodServiceFindVirtualGoodLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type VirtualGoodServiceFindVirtualGoodLanguageEnum =
  (typeof VirtualGoodServiceFindVirtualGoodLanguageEnum)[keyof typeof VirtualGoodServiceFindVirtualGoodLanguageEnum];
/**
 * @export
 */
export const VirtualGoodServiceFindVirtualGoodKindEnum = {
  Gift: 'vir_gift',
  Coupon: 'vir_coupon',
  Lottery: 'vir_lottery',
} as const;
export type VirtualGoodServiceFindVirtualGoodKindEnum =
  (typeof VirtualGoodServiceFindVirtualGoodKindEnum)[keyof typeof VirtualGoodServiceFindVirtualGoodKindEnum];
/**
 * @export
 */
export const VirtualGoodServiceFindVirtualGoodTypeEnum = {
  Physical: 'physical',
  Virtual: 'virtual',
  Empty: 'empty',
} as const;
export type VirtualGoodServiceFindVirtualGoodTypeEnum =
  (typeof VirtualGoodServiceFindVirtualGoodTypeEnum)[keyof typeof VirtualGoodServiceFindVirtualGoodTypeEnum];
