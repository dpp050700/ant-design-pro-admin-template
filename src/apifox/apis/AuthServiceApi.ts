/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AuthAuthorizeRsp,
  AuthLoginRequest,
  AuthLoginResponse,
  AuthLogoutRequest,
  AuthRefreshRequest,
  AuthRefreshResponse,
  AuthRegisterRequest,
  AuthVerifyRequest,
  AuthVerifyResponse,
  AuthorizeCallbackRsp,
  AuthorizeProviderRsp,
  ResetPasswordReq,
  RpcStatus,
  SendForgetPasswordEmailReq,
  SendRegisterEmailReq,
  V1ErrCode,
} from '../models/index';
import {
  AuthAuthorizeRspFromJSON,
  AuthAuthorizeRspToJSON,
  AuthLoginRequestFromJSON,
  AuthLoginRequestToJSON,
  AuthLoginResponseFromJSON,
  AuthLoginResponseToJSON,
  AuthLogoutRequestFromJSON,
  AuthLogoutRequestToJSON,
  AuthRefreshRequestFromJSON,
  AuthRefreshRequestToJSON,
  AuthRefreshResponseFromJSON,
  AuthRefreshResponseToJSON,
  AuthRegisterRequestFromJSON,
  AuthRegisterRequestToJSON,
  AuthVerifyRequestFromJSON,
  AuthVerifyRequestToJSON,
  AuthVerifyResponseFromJSON,
  AuthVerifyResponseToJSON,
  AuthorizeCallbackRspFromJSON,
  AuthorizeCallbackRspToJSON,
  AuthorizeProviderRspFromJSON,
  AuthorizeProviderRspToJSON,
  ResetPasswordReqFromJSON,
  ResetPasswordReqToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON,
  SendForgetPasswordEmailReqFromJSON,
  SendForgetPasswordEmailReqToJSON,
  SendRegisterEmailReqFromJSON,
  SendRegisterEmailReqToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
} from '../models/index';

export interface AuthServiceAdminLoginRequest {
  body: AuthLoginRequest;
}

export interface AuthServiceAuthorizeRequest {
  provider: AuthServiceAuthorizeProviderEnum;
}

export interface AuthServiceAuthorizeCallbackRequest {
  provider: AuthServiceAuthorizeCallbackProviderEnum;
  code: string;
  state: string;
}

export interface AuthServiceLoginRequest {
  body: AuthLoginRequest;
}

export interface AuthServiceLogoutRequest {
  body: AuthLogoutRequest;
}

export interface AuthServiceRefreshRequest {
  body: AuthRefreshRequest;
}

export interface AuthServiceRegisterRequest {
  body: AuthRegisterRequest;
}

export interface AuthServiceResetPasswordRequest {
  body: ResetPasswordReq;
}

export interface AuthServiceSendForgetPasswordEmailRequest {
  body: SendForgetPasswordEmailReq;
}

export interface AuthServiceSendRegisterEmailRequest {
  body: SendRegisterEmailReq;
}

export interface AuthServiceVerifyRequest {
  body: AuthVerifyRequest;
}

/**
 *
 */
export class AuthServiceApi extends runtime.BaseAPI {
  /**
   * 管理员登录
   */
  async authServiceAdminLoginRaw(
    requestParameters: AuthServiceAdminLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthLoginResponse>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling authServiceAdminLogin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/admin_login`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AuthLoginRequestToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthLoginResponseFromJSON(jsonValue),
    );
  }

  /**
   * 管理员登录
   */
  async authServiceAdminLogin(
    requestParameters: AuthServiceAdminLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthLoginResponse> {
    const response = await this.authServiceAdminLoginRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 第三方授权登录
   */
  async authServiceAuthorizeRaw(
    requestParameters: AuthServiceAuthorizeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthAuthorizeRsp>> {
    if (requestParameters.provider === null || requestParameters.provider === undefined) {
      throw new runtime.RequiredError(
        'provider',
        'Required parameter requestParameters.provider was null or undefined when calling authServiceAuthorize.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/auth/authorize/{provider}`.replace(
          `{${'provider'}}`,
          encodeURIComponent(String(requestParameters.provider)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthAuthorizeRspFromJSON(jsonValue),
    );
  }

  /**
   * 第三方授权登录
   */
  async authServiceAuthorize(
    requestParameters: AuthServiceAuthorizeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthAuthorizeRsp> {
    const response = await this.authServiceAuthorizeRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 第三方授权登录回调
   */
  async authServiceAuthorizeCallbackRaw(
    requestParameters: AuthServiceAuthorizeCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthorizeCallbackRsp>> {
    if (requestParameters.provider === null || requestParameters.provider === undefined) {
      throw new runtime.RequiredError(
        'provider',
        'Required parameter requestParameters.provider was null or undefined when calling authServiceAuthorizeCallback.',
      );
    }

    if (requestParameters.code === null || requestParameters.code === undefined) {
      throw new runtime.RequiredError(
        'code',
        'Required parameter requestParameters.code was null or undefined when calling authServiceAuthorizeCallback.',
      );
    }

    if (requestParameters.state === null || requestParameters.state === undefined) {
      throw new runtime.RequiredError(
        'state',
        'Required parameter requestParameters.state was null or undefined when calling authServiceAuthorizeCallback.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.code !== undefined) {
      queryParameters['code'] = requestParameters.code;
    }

    if (requestParameters.state !== undefined) {
      queryParameters['state'] = requestParameters.state;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/auth/authorize/{provider}/callback`.replace(
          `{${'provider'}}`,
          encodeURIComponent(String(requestParameters.provider)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthorizeCallbackRspFromJSON(jsonValue),
    );
  }

  /**
   * 第三方授权登录回调
   */
  async authServiceAuthorizeCallback(
    requestParameters: AuthServiceAuthorizeCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthorizeCallbackRsp> {
    const response = await this.authServiceAuthorizeCallbackRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 第三方登录授权种类列表
   */
  async authServiceAuthorizeProviderRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthorizeProviderRsp>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/auth/authorize_providers`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthorizeProviderRspFromJSON(jsonValue),
    );
  }

  /**
   * 第三方登录授权种类列表
   */
  async authServiceAuthorizeProvider(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthorizeProviderRsp> {
    const response = await this.authServiceAuthorizeProviderRaw(initOverrides);
    return await response.value();
  }

  /**
   * 用户登录
   */
  async authServiceLoginRaw(
    requestParameters: AuthServiceLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthLoginResponse>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling authServiceLogin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/login`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AuthLoginRequestToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthLoginResponseFromJSON(jsonValue),
    );
  }

  /**
   * 用户登录
   */
  async authServiceLogin(
    requestParameters: AuthServiceLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthLoginResponse> {
    const response = await this.authServiceLoginRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 用户登出
   */
  async authServiceLogoutRaw(
    requestParameters: AuthServiceLogoutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling authServiceLogout.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/logout`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AuthLogoutRequestToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 用户登出
   */
  async authServiceLogout(
    requestParameters: AuthServiceLogoutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.authServiceLogoutRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 认证 token 过期重新续期
   */
  async authServiceRefreshRaw(
    requestParameters: AuthServiceRefreshRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthRefreshResponse>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling authServiceRefresh.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/refresh`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AuthRefreshRequestToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthRefreshResponseFromJSON(jsonValue),
    );
  }

  /**
   * 认证 token 过期重新续期
   */
  async authServiceRefresh(
    requestParameters: AuthServiceRefreshRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthRefreshResponse> {
    const response = await this.authServiceRefreshRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 用户注册
   */
  async authServiceRegisterRaw(
    requestParameters: AuthServiceRegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling authServiceRegister.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/register`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AuthRegisterRequestToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 用户注册
   */
  async authServiceRegister(
    requestParameters: AuthServiceRegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.authServiceRegisterRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 重置密码需要验证码
   * 重置密码
   */
  async authServiceResetPasswordRaw(
    requestParameters: AuthServiceResetPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling authServiceResetPassword.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/reset_password`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ResetPasswordReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 重置密码需要验证码
   * 重置密码
   */
  async authServiceResetPassword(
    requestParameters: AuthServiceResetPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.authServiceResetPasswordRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 忘记密码发送邮件
   */
  async authServiceSendForgetPasswordEmailRaw(
    requestParameters: AuthServiceSendForgetPasswordEmailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling authServiceSendForgetPasswordEmail.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/sent_forget_password_email`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SendForgetPasswordEmailReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 忘记密码发送邮件
   */
  async authServiceSendForgetPasswordEmail(
    requestParameters: AuthServiceSendForgetPasswordEmailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.authServiceSendForgetPasswordEmailRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 验证码过期时间：30s
   * 用户注册发送邮件
   */
  async authServiceSendRegisterEmailRaw(
    requestParameters: AuthServiceSendRegisterEmailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling authServiceSendRegisterEmail.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/sent_register_email`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SendRegisterEmailReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 验证码过期时间：30s
   * 用户注册发送邮件
   */
  async authServiceSendRegisterEmail(
    requestParameters: AuthServiceSendRegisterEmailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.authServiceSendRegisterEmailRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 验证 token 是否过期
   */
  async authServiceVerifyRaw(
    requestParameters: AuthServiceVerifyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AuthVerifyResponse>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling authServiceVerify.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/verify`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AuthVerifyRequestToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthVerifyResponseFromJSON(jsonValue),
    );
  }

  /**
   * 验证 token 是否过期
   */
  async authServiceVerify(
    requestParameters: AuthServiceVerifyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AuthVerifyResponse> {
    const response = await this.authServiceVerifyRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const AuthServiceAuthorizeProviderEnum = {
  Github: 'github',
  Google: 'google',
  Auth0: 'auth0',
  GooglePc: 'google_pc',
  Slack: 'slack',
} as const;
export type AuthServiceAuthorizeProviderEnum =
  (typeof AuthServiceAuthorizeProviderEnum)[keyof typeof AuthServiceAuthorizeProviderEnum];
/**
 * @export
 */
export const AuthServiceAuthorizeCallbackProviderEnum = {
  Github: 'github',
  Google: 'google',
  Auth0: 'auth0',
  GooglePc: 'google_pc',
  Slack: 'slack',
} as const;
export type AuthServiceAuthorizeCallbackProviderEnum =
  (typeof AuthServiceAuthorizeCallbackProviderEnum)[keyof typeof AuthServiceAuthorizeCallbackProviderEnum];
