/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { BookmarkCreateReq, Bookmarks, IdRsp, RpcStatus, V1ErrCode } from '../models/index';
import {
  BookmarkCreateReqFromJSON,
  BookmarkCreateReqToJSON,
  BookmarksFromJSON,
  BookmarksToJSON,
  IdRspFromJSON,
  IdRspToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
} from '../models/index';

export interface BookmarkServiceCreateRequest {
  body: BookmarkCreateReq;
}

export interface BookmarkServiceDeleteRequest {
  id: string;
}

export interface BookmarkServiceFindRequest {
  resKind?: BookmarkServiceFindResKindEnum;
  userId?: string;
  sortBy?: string;
  pageLimit?: number;
  pageOffset?: number;
}

/**
 *
 */
export class BookmarkServiceApi extends runtime.BaseAPI {
  /**
   * 添加收藏
   */
  async bookmarkServiceCreateRaw(
    requestParameters: BookmarkServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IdRsp>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling bookmarkServiceCreate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/bookmark/bookmark`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: BookmarkCreateReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdRspFromJSON(jsonValue));
  }

  /**
   * 添加收藏
   */
  async bookmarkServiceCreate(
    requestParameters: BookmarkServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IdRsp> {
    const response = await this.bookmarkServiceCreateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 删除收藏
   */
  async bookmarkServiceDeleteRaw(
    requestParameters: BookmarkServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling bookmarkServiceDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/bookmark/bookmark/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 删除收藏
   */
  async bookmarkServiceDelete(
    requestParameters: BookmarkServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.bookmarkServiceDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 查询收藏列表
   */
  async bookmarkServiceFindRaw(
    requestParameters: BookmarkServiceFindRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Bookmarks>> {
    const queryParameters: any = {};

    if (requestParameters.resKind !== undefined) {
      queryParameters['resKind'] = requestParameters.resKind;
    }

    if (requestParameters.userId !== undefined) {
      queryParameters['userId'] = requestParameters.userId;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sortBy'] = requestParameters.sortBy;
    }

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/bookmark/bookmarks`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksFromJSON(jsonValue));
  }

  /**
   * 查询收藏列表
   */
  async bookmarkServiceFind(
    requestParameters: BookmarkServiceFindRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Bookmarks> {
    const response = await this.bookmarkServiceFindRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const BookmarkServiceFindResKindEnum = {
  Room: 'room',
  Story: 'story',
} as const;
export type BookmarkServiceFindResKindEnum =
  (typeof BookmarkServiceFindResKindEnum)[keyof typeof BookmarkServiceFindResKindEnum];
