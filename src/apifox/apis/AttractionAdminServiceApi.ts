/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AttractionAdminServiceUpdateBody,
  AttractionAdminServiceUpdateStatusBody,
  AttractionCreateReq,
  IdRsp,
  RpcStatus,
  V1ErrCode,
} from '../models/index';
import {
  AttractionAdminServiceUpdateBodyFromJSON,
  AttractionAdminServiceUpdateBodyToJSON,
  AttractionAdminServiceUpdateStatusBodyFromJSON,
  AttractionAdminServiceUpdateStatusBodyToJSON,
  AttractionCreateReqFromJSON,
  AttractionCreateReqToJSON,
  IdRspFromJSON,
  IdRspToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
} from '../models/index';

export interface AttractionAdminServiceCopyRequest {
  language?: Array<AttractionAdminServiceCopyLanguageEnum>;
  attractionId?: string;
}

export interface AttractionAdminServiceCreateRequest {
  body: AttractionCreateReq;
}

export interface AttractionAdminServiceDeleteRequest {
  id: string;
}

export interface AttractionAdminServiceToppingRequest {
  id: string;
}

export interface AttractionAdminServiceUnToppingRequest {
  id: string;
}

export interface AttractionAdminServiceUpdateRequest {
  attractionId: string;
  body: AttractionAdminServiceUpdateBody;
}

export interface AttractionAdminServiceUpdateStatusRequest {
  id: string;
  body: AttractionAdminServiceUpdateStatusBody;
}

/**
 *
 */
export class AttractionAdminServiceApi extends runtime.BaseAPI {
  /**
   * 复制
   */
  async attractionAdminServiceCopyRaw(
    requestParameters: AttractionAdminServiceCopyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    if (requestParameters.language) {
      queryParameters['language'] = requestParameters.language;
    }

    if (requestParameters.attractionId !== undefined) {
      queryParameters['attractionId'] = requestParameters.attractionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/attraction/attractions/copy`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 复制
   */
  async attractionAdminServiceCopy(
    requestParameters: AttractionAdminServiceCopyRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.attractionAdminServiceCopyRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 添加景点
   */
  async attractionAdminServiceCreateRaw(
    requestParameters: AttractionAdminServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IdRsp>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling attractionAdminServiceCreate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/attraction/attractions`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AttractionCreateReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdRspFromJSON(jsonValue));
  }

  /**
   * 添加景点
   */
  async attractionAdminServiceCreate(
    requestParameters: AttractionAdminServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IdRsp> {
    const response = await this.attractionAdminServiceCreateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 删除景点
   */
  async attractionAdminServiceDeleteRaw(
    requestParameters: AttractionAdminServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling attractionAdminServiceDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/attraction/attraction/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 删除景点
   */
  async attractionAdminServiceDelete(
    requestParameters: AttractionAdminServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.attractionAdminServiceDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 置顶操作
   */
  async attractionAdminServiceToppingRaw(
    requestParameters: AttractionAdminServiceToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling attractionAdminServiceTopping.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/attraction/attraction/{id}:to_top`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 置顶操作
   */
  async attractionAdminServiceTopping(
    requestParameters: AttractionAdminServiceToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.attractionAdminServiceToppingRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 取消置顶
   */
  async attractionAdminServiceUnToppingRaw(
    requestParameters: AttractionAdminServiceUnToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling attractionAdminServiceUnTopping.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/attraction/attraction/{id}:de_top`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 取消置顶
   */
  async attractionAdminServiceUnTopping(
    requestParameters: AttractionAdminServiceUnToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.attractionAdminServiceUnToppingRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 更新景点信息
   */
  async attractionAdminServiceUpdateRaw(
    requestParameters: AttractionAdminServiceUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.attractionId === null || requestParameters.attractionId === undefined) {
      throw new runtime.RequiredError(
        'attractionId',
        'Required parameter requestParameters.attractionId was null or undefined when calling attractionAdminServiceUpdate.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling attractionAdminServiceUpdate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/attraction/attraction/{attractionId}`.replace(
          `{${'attractionId'}}`,
          encodeURIComponent(String(requestParameters.attractionId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: AttractionAdminServiceUpdateBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 更新景点信息
   */
  async attractionAdminServiceUpdate(
    requestParameters: AttractionAdminServiceUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.attractionAdminServiceUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 更新状态
   */
  async attractionAdminServiceUpdateStatusRaw(
    requestParameters: AttractionAdminServiceUpdateStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling attractionAdminServiceUpdateStatus.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling attractionAdminServiceUpdateStatus.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/attraction/attraction/{id}:status`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: AttractionAdminServiceUpdateStatusBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 更新状态
   */
  async attractionAdminServiceUpdateStatus(
    requestParameters: AttractionAdminServiceUpdateStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.attractionAdminServiceUpdateStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const AttractionAdminServiceCopyLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type AttractionAdminServiceCopyLanguageEnum =
  (typeof AttractionAdminServiceCopyLanguageEnum)[keyof typeof AttractionAdminServiceCopyLanguageEnum];
