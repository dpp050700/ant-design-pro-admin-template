/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { RpcStatus, UpdateRoleBody, Users, V1ErrCode } from '../models/index';
import {
  RpcStatusFromJSON,
  RpcStatusToJSON,
  UpdateRoleBodyFromJSON,
  UpdateRoleBodyToJSON,
  UsersFromJSON,
  UsersToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
} from '../models/index';

export interface UserAdminServiceDeleteRequest {
  id: string;
}

export interface UserAdminServiceFindRequest {
  sortBy?: string;
  pageLimit?: number;
  pageOffset?: number;
  name?: string;
  language?: UserAdminServiceFindLanguageEnum;
}

export interface UserAdminServiceUpdateRoleRequest {
  id: string;
  body: UpdateRoleBody;
}

/**
 *
 */
export class UserAdminServiceApi extends runtime.BaseAPI {
  /**
   * 删除用户
   */
  async userAdminServiceDeleteRaw(
    requestParameters: UserAdminServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling userAdminServiceDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/user/user/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 删除用户
   */
  async userAdminServiceDelete(
    requestParameters: UserAdminServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.userAdminServiceDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 查询用户列表
   */
  async userAdminServiceFindRaw(
    requestParameters: UserAdminServiceFindRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Users>> {
    const queryParameters: any = {};

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sortBy'] = requestParameters.sortBy;
    }

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    if (requestParameters.name !== undefined) {
      queryParameters['name'] = requestParameters.name;
    }

    if (requestParameters.language !== undefined) {
      queryParameters['language'] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/user/users`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UsersFromJSON(jsonValue));
  }

  /**
   * 查询用户列表
   */
  async userAdminServiceFind(
    requestParameters: UserAdminServiceFindRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Users> {
    const response = await this.userAdminServiceFindRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 修改角色
   */
  async userAdminServiceUpdateRoleRaw(
    requestParameters: UserAdminServiceUpdateRoleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling userAdminServiceUpdateRole.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling userAdminServiceUpdateRole.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/user/user/{id}:role`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateRoleBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 修改角色
   */
  async userAdminServiceUpdateRole(
    requestParameters: UserAdminServiceUpdateRoleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.userAdminServiceUpdateRoleRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const UserAdminServiceFindLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type UserAdminServiceFindLanguageEnum =
  (typeof UserAdminServiceFindLanguageEnum)[keyof typeof UserAdminServiceFindLanguageEnum];
