/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateOperationBody,
  IdRsp,
  RpcStatus,
  Story,
  StoryComments,
  StoryCreateReq,
  StoryList,
  StoryOperations,
  StoryServiceCreateCommentBody,
  StoryServiceUpdateBody,
  V1ErrCode,
} from '../models/index';
import {
  CreateOperationBodyFromJSON,
  CreateOperationBodyToJSON,
  IdRspFromJSON,
  IdRspToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON,
  StoryFromJSON,
  StoryToJSON,
  StoryCommentsFromJSON,
  StoryCommentsToJSON,
  StoryCreateReqFromJSON,
  StoryCreateReqToJSON,
  StoryListFromJSON,
  StoryListToJSON,
  StoryOperationsFromJSON,
  StoryOperationsToJSON,
  StoryServiceCreateCommentBodyFromJSON,
  StoryServiceCreateCommentBodyToJSON,
  StoryServiceUpdateBodyFromJSON,
  StoryServiceUpdateBodyToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
} from '../models/index';

export interface StoryServiceCreateRequest {
  body: StoryCreateReq;
}

export interface StoryServiceCreateCommentRequest {
  storyId: string;
  body: StoryServiceCreateCommentBody;
}

export interface StoryServiceCreateOperationRequest {
  storyId: string;
  body: CreateOperationBody;
}

export interface StoryServiceDeleteRequest {
  id: string;
}

export interface StoryServiceDeleteCommentRequest {
  id: string;
}

export interface StoryServiceDeleteOperationRequest {
  id: string;
}

export interface StoryServiceDetailRequest {
  id: string;
  featuresLikeCount?: boolean;
  featuresCommentCount?: boolean;
  featuresLikeList?: boolean;
  featuresCommentList?: boolean;
}

export interface StoryServiceFindRequest {
  featuresLikeCount?: boolean;
  featuresCommentCount?: boolean;
  featuresLikeList?: boolean;
  featuresCommentList?: boolean;
  userId?: string;
  kind?: StoryServiceFindKindEnum;
  pageLimit?: number;
  pageOffset?: number;
  country?: string;
  status?: StoryServiceFindStatusEnum;
  language?: StoryServiceFindLanguageEnum;
  attractionId?: string;
}

export interface StoryServiceFindStoryCommentRequest {
  storyId: string;
  pageLimit?: number;
  pageOffset?: number;
}

export interface StoryServiceFindStoryOperationRequest {
  storyId: string;
  pageLimit?: number;
  pageOffset?: number;
}

export interface StoryServiceToppingRequest {
  id: string;
}

export interface StoryServiceUnToppingRequest {
  id: string;
}

export interface StoryServiceUpdateRequest {
  storyId: string;
  body: StoryServiceUpdateBody;
}

/**
 *
 */
export class StoryServiceApi extends runtime.BaseAPI {
  /**
   * 文章创建
   */
  async storyServiceCreateRaw(
    requestParameters: StoryServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IdRsp>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling storyServiceCreate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/story/stories`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: StoryCreateReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdRspFromJSON(jsonValue));
  }

  /**
   * 文章创建
   */
  async storyServiceCreate(
    requestParameters: StoryServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IdRsp> {
    const response = await this.storyServiceCreateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 文章评论增加
   */
  async storyServiceCreateCommentRaw(
    requestParameters: StoryServiceCreateCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IdRsp>> {
    if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
      throw new runtime.RequiredError(
        'storyId',
        'Required parameter requestParameters.storyId was null or undefined when calling storyServiceCreateComment.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling storyServiceCreateComment.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/story/stories/{storyId}/comments`.replace(
          `{${'storyId'}}`,
          encodeURIComponent(String(requestParameters.storyId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: StoryServiceCreateCommentBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdRspFromJSON(jsonValue));
  }

  /**
   * 文章评论增加
   */
  async storyServiceCreateComment(
    requestParameters: StoryServiceCreateCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IdRsp> {
    const response = await this.storyServiceCreateCommentRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 比如喜欢(like,zan)
   * 文章操作创建
   */
  async storyServiceCreateOperationRaw(
    requestParameters: StoryServiceCreateOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IdRsp>> {
    if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
      throw new runtime.RequiredError(
        'storyId',
        'Required parameter requestParameters.storyId was null or undefined when calling storyServiceCreateOperation.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling storyServiceCreateOperation.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/story/stories/{storyId}/operations`.replace(
          `{${'storyId'}}`,
          encodeURIComponent(String(requestParameters.storyId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateOperationBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdRspFromJSON(jsonValue));
  }

  /**
   * 比如喜欢(like,zan)
   * 文章操作创建
   */
  async storyServiceCreateOperation(
    requestParameters: StoryServiceCreateOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IdRsp> {
    const response = await this.storyServiceCreateOperationRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 文章删除
   */
  async storyServiceDeleteRaw(
    requestParameters: StoryServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling storyServiceDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/story/stories/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 文章删除
   */
  async storyServiceDelete(
    requestParameters: StoryServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.storyServiceDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 文章评论删除
   */
  async storyServiceDeleteCommentRaw(
    requestParameters: StoryServiceDeleteCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling storyServiceDeleteComment.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/story/stories/comments/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 文章评论删除
   */
  async storyServiceDeleteComment(
    requestParameters: StoryServiceDeleteCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.storyServiceDeleteCommentRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 文章操作删除
   */
  async storyServiceDeleteOperationRaw(
    requestParameters: StoryServiceDeleteOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling storyServiceDeleteOperation.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/story/stories/operations/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 文章操作删除
   */
  async storyServiceDeleteOperation(
    requestParameters: StoryServiceDeleteOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.storyServiceDeleteOperationRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 文章详情查询
   */
  async storyServiceDetailRaw(
    requestParameters: StoryServiceDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Story>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling storyServiceDetail.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.featuresLikeCount !== undefined) {
      queryParameters['features.likeCount'] = requestParameters.featuresLikeCount;
    }

    if (requestParameters.featuresCommentCount !== undefined) {
      queryParameters['features.commentCount'] = requestParameters.featuresCommentCount;
    }

    if (requestParameters.featuresLikeList !== undefined) {
      queryParameters['features.likeList'] = requestParameters.featuresLikeList;
    }

    if (requestParameters.featuresCommentList !== undefined) {
      queryParameters['features.commentList'] = requestParameters.featuresCommentList;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/story/story/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StoryFromJSON(jsonValue));
  }

  /**
   * 文章详情查询
   */
  async storyServiceDetail(
    requestParameters: StoryServiceDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Story> {
    const response = await this.storyServiceDetailRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 文章列表查询
   */
  async storyServiceFindRaw(
    requestParameters: StoryServiceFindRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StoryList>> {
    const queryParameters: any = {};

    if (requestParameters.featuresLikeCount !== undefined) {
      queryParameters['features.likeCount'] = requestParameters.featuresLikeCount;
    }

    if (requestParameters.featuresCommentCount !== undefined) {
      queryParameters['features.commentCount'] = requestParameters.featuresCommentCount;
    }

    if (requestParameters.featuresLikeList !== undefined) {
      queryParameters['features.likeList'] = requestParameters.featuresLikeList;
    }

    if (requestParameters.featuresCommentList !== undefined) {
      queryParameters['features.commentList'] = requestParameters.featuresCommentList;
    }

    if (requestParameters.userId !== undefined) {
      queryParameters['userId'] = requestParameters.userId;
    }

    if (requestParameters.kind !== undefined) {
      queryParameters['kind'] = requestParameters.kind;
    }

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    if (requestParameters.country !== undefined) {
      queryParameters['country'] = requestParameters.country;
    }

    if (requestParameters.status !== undefined) {
      queryParameters['status'] = requestParameters.status;
    }

    if (requestParameters.language !== undefined) {
      queryParameters['language'] = requestParameters.language;
    }

    if (requestParameters.attractionId !== undefined) {
      queryParameters['attractionId'] = requestParameters.attractionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/story/stories`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StoryListFromJSON(jsonValue));
  }

  /**
   * 文章列表查询
   */
  async storyServiceFind(
    requestParameters: StoryServiceFindRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StoryList> {
    const response = await this.storyServiceFindRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 文章评论列表
   */
  async storyServiceFindStoryCommentRaw(
    requestParameters: StoryServiceFindStoryCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StoryComments>> {
    if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
      throw new runtime.RequiredError(
        'storyId',
        'Required parameter requestParameters.storyId was null or undefined when calling storyServiceFindStoryComment.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/story/stories/{storyId}/comments`.replace(
          `{${'storyId'}}`,
          encodeURIComponent(String(requestParameters.storyId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StoryCommentsFromJSON(jsonValue));
  }

  /**
   * 文章评论列表
   */
  async storyServiceFindStoryComment(
    requestParameters: StoryServiceFindStoryCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StoryComments> {
    const response = await this.storyServiceFindStoryCommentRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 文章先赞列表
   */
  async storyServiceFindStoryOperationRaw(
    requestParameters: StoryServiceFindStoryOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StoryOperations>> {
    if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
      throw new runtime.RequiredError(
        'storyId',
        'Required parameter requestParameters.storyId was null or undefined when calling storyServiceFindStoryOperation.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/story/stories/{storyId}/operations`.replace(
          `{${'storyId'}}`,
          encodeURIComponent(String(requestParameters.storyId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StoryOperationsFromJSON(jsonValue));
  }

  /**
   * 文章先赞列表
   */
  async storyServiceFindStoryOperation(
    requestParameters: StoryServiceFindStoryOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StoryOperations> {
    const response = await this.storyServiceFindStoryOperationRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 置顶操作
   */
  async storyServiceToppingRaw(
    requestParameters: StoryServiceToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling storyServiceTopping.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/story/stories/{id}:to_top`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 置顶操作
   */
  async storyServiceTopping(
    requestParameters: StoryServiceToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.storyServiceToppingRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 取消置顶
   */
  async storyServiceUnToppingRaw(
    requestParameters: StoryServiceUnToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling storyServiceUnTopping.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/story/stories/{id}:de_top`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 取消置顶
   */
  async storyServiceUnTopping(
    requestParameters: StoryServiceUnToppingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.storyServiceUnToppingRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 文章修改
   */
  async storyServiceUpdateRaw(
    requestParameters: StoryServiceUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
      throw new runtime.RequiredError(
        'storyId',
        'Required parameter requestParameters.storyId was null or undefined when calling storyServiceUpdate.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling storyServiceUpdate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/story/stories/{storyId}`.replace(
          `{${'storyId'}}`,
          encodeURIComponent(String(requestParameters.storyId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: StoryServiceUpdateBodyToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 文章修改
   */
  async storyServiceUpdate(
    requestParameters: StoryServiceUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.storyServiceUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const StoryServiceFindKindEnum = {
  CommunityKind: 'community_kind',
  TourismStrategyKind: 'tourism_strategy_kind',
} as const;
export type StoryServiceFindKindEnum =
  (typeof StoryServiceFindKindEnum)[keyof typeof StoryServiceFindKindEnum];
/**
 * @export
 */
export const StoryServiceFindStatusEnum = {
  AuditStatus: 'audit_status',
  PublishedStatus: 'published_status',
} as const;
export type StoryServiceFindStatusEnum =
  (typeof StoryServiceFindStatusEnum)[keyof typeof StoryServiceFindStatusEnum];
/**
 * @export
 */
export const StoryServiceFindLanguageEnum = {
  English: 'English',
  Japanese: 'Japanese',
  Thai: 'Thai',
  Burmese: 'Burmese',
  Chinese: 'Chinese',
} as const;
export type StoryServiceFindLanguageEnum =
  (typeof StoryServiceFindLanguageEnum)[keyof typeof StoryServiceFindLanguageEnum];
