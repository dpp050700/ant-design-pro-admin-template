/* tslint:disable */
/* eslint-disable */
/**
 * chameleon service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { RpcStatus, ShareCreateReq, Sharing, SharingList, V1ErrCode } from '../models/index';
import {
  RpcStatusFromJSON,
  RpcStatusToJSON,
  ShareCreateReqFromJSON,
  ShareCreateReqToJSON,
  SharingFromJSON,
  SharingToJSON,
  SharingListFromJSON,
  SharingListToJSON,
  V1ErrCodeFromJSON,
  V1ErrCodeToJSON,
} from '../models/index';

export interface ShareServiceCreateRequest {
  body: ShareCreateReq;
}

export interface ShareServiceDeleteRequest {
  id: string;
}

export interface ShareServiceFindRequest {
  resKind?: ShareServiceFindResKindEnum;
  pageLimit?: number;
  pageOffset?: number;
  userId?: string;
}

/**
 *
 */
export class ShareServiceApi extends runtime.BaseAPI {
  /**
   * 创建分享
   */
  async shareServiceCreateRaw(
    requestParameters: ShareServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Sharing>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling shareServiceCreate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/sharing/shares`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ShareCreateReqToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => SharingFromJSON(jsonValue));
  }

  /**
   * 创建分享
   */
  async shareServiceCreate(
    requestParameters: ShareServiceCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Sharing> {
    const response = await this.shareServiceCreateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 删除分享
   */
  async shareServiceDeleteRaw(
    requestParameters: ShareServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling shareServiceDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/sharing/shares/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 删除分享
   */
  async shareServiceDelete(
    requestParameters: ShareServiceDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.shareServiceDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 查询分享列表
   */
  async shareServiceFindRaw(
    requestParameters: ShareServiceFindRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SharingList>> {
    const queryParameters: any = {};

    if (requestParameters.resKind !== undefined) {
      queryParameters['resKind'] = requestParameters.resKind;
    }

    if (requestParameters.pageLimit !== undefined) {
      queryParameters['page.limit'] = requestParameters.pageLimit;
    }

    if (requestParameters.pageOffset !== undefined) {
      queryParameters['page.offset'] = requestParameters.pageOffset;
    }

    if (requestParameters.userId !== undefined) {
      queryParameters['userId'] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/sharing/shares`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => SharingListFromJSON(jsonValue));
  }

  /**
   * 查询分享列表
   */
  async shareServiceFind(
    requestParameters: ShareServiceFindRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SharingList> {
    const response = await this.shareServiceFindRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const ShareServiceFindResKindEnum = {
  Room: 'room',
  Story: 'story',
} as const;
export type ShareServiceFindResKindEnum =
  (typeof ShareServiceFindResKindEnum)[keyof typeof ShareServiceFindResKindEnum];
